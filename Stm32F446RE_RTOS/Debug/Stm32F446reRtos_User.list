
Stm32F446reRtos_User.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007240  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08007410  08007410  00008410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800744c  0800744c  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800744c  0800744c  0000844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007454  08007454  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007454  08007454  00008454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007458  08007458  00008458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800745c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dd8  20000060  080074bc  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e38  080074bc  00009e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002108a  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004469  00000000  00000000  0002a11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  0002e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001602  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027414  00000000  00000000  000317aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224d0  00000000  00000000  00058bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eef30  00000000  00000000  0007b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169fbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007afc  00000000  00000000  0016a004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00171b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073f8 	.word	0x080073f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080073f8 	.word	0x080073f8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <App_Run>:

/******************************************************************************
*							API IMPLEMENTATION
******************************************************************************/
void App_Run(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	/* Application specific initializations */


	/* Creating the tasks for the Application */
    Create_Tasks();
 8000540:	f000 f804 	bl	800054c <Create_Tasks>

    /* Start the FreeRTOS Scheduler */
    vTaskStartScheduler();
 8000544:	f005 f988 	bl	8005858 <vTaskStartScheduler>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <Create_Tasks>:

/******************************************************************************
*							LOCAL FUNCTION DEFINITIONS
******************************************************************************/
static void Create_Tasks(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af02      	add	r7, sp, #8

	xTaskCreate(LedTask_Handler,     "LED",   128, NULL, 1, NULL);
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2280      	movs	r2, #128	@ 0x80
 800055e:	490c      	ldr	r1, [pc, #48]	@ (8000590 <Create_Tasks+0x44>)
 8000560:	480c      	ldr	r0, [pc, #48]	@ (8000594 <Create_Tasks+0x48>)
 8000562:	f004 ffe5 	bl	8005530 <xTaskCreate>
	xTaskCreate(LM35_Handler,        "LM35",  128, NULL, 1, NULL);
 8000566:	2300      	movs	r3, #0
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	2280      	movs	r2, #128	@ 0x80
 8000572:	4909      	ldr	r1, [pc, #36]	@ (8000598 <Create_Tasks+0x4c>)
 8000574:	4809      	ldr	r0, [pc, #36]	@ (800059c <Create_Tasks+0x50>)
 8000576:	f004 ffdb 	bl	8005530 <xTaskCreate>
//	xTaskCreate(Task_SPI_MPU6050,    "SPI",   128, NULL, 1, NULL);
//	xTaskCreate(Task_I2C_LCD,        "LCD",   128, NULL, 1, NULL);


	/* Create Queues */
	xLedModeQueue = xQueueCreate(5, sizeof(LedMode_t));
 800057a:	2200      	movs	r2, #0
 800057c:	2101      	movs	r1, #1
 800057e:	2005      	movs	r0, #5
 8000580:	f004 fb27 	bl	8004bd2 <xQueueGenericCreate>
 8000584:	4603      	mov	r3, r0
 8000586:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <Create_Tasks+0x54>)
 8000588:	6013      	str	r3, [r2, #0]
	{
	    // Handle queue creation failure
	}


}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	08007410 	.word	0x08007410
 8000594:	080005a5 	.word	0x080005a5
 8000598:	08007414 	.word	0x08007414
 800059c:	08000669 	.word	0x08000669
 80005a0:	2000007c 	.word	0x2000007c

080005a4 <LedTask_Handler>:

/******************************************************************************
*							API IMPLEMENTATION
******************************************************************************/
void LedTask_Handler(void *params)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    uint8_t current_mode = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]
    TickType_t on_time = 300, off_time = 300;
 80005b0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005ba:	613b      	str	r3, [r7, #16]

    while (1)
    {
    	/* LED Pattern Handling */
        if (xQueueReceive(xLedModeQueue, &current_mode, pdMS_TO_TICKS(10)) == pdPASS)
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <LedTask_Handler+0xb8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f107 010f 	add.w	r1, r7, #15
 80005c4:	220a      	movs	r2, #10
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fd02 	bl	8004fd0 <xQueueReceive>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d120      	bne.n	8000614 <LedTask_Handler+0x70>
        {
            switch (current_mode) {
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d011      	beq.n	80005fc <LedTask_Handler+0x58>
 80005d8:	2b02      	cmp	r3, #2
 80005da:	dc15      	bgt.n	8000608 <LedTask_Handler+0x64>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <LedTask_Handler+0x42>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d005      	beq.n	80005f0 <LedTask_Handler+0x4c>
 80005e4:	e010      	b.n	8000608 <LedTask_Handler+0x64>
                case 0: on_time = off_time = 100; break;
 80005e6:	2364      	movs	r3, #100	@ 0x64
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e011      	b.n	8000614 <LedTask_Handler+0x70>
                case 1: on_time = off_time = 300; break;
 80005f0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e00b      	b.n	8000614 <LedTask_Handler+0x70>
                case 2: on_time = off_time = 600; break;
 80005fc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e005      	b.n	8000614 <LedTask_Handler+0x70>
                default: on_time = off_time = 300; break;
 8000608:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	bf00      	nop
        else
        {
        	/* Do nothing */
        }

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // LED ON
 8000614:	2200      	movs	r2, #0
 8000616:	2120      	movs	r1, #32
 8000618:	4811      	ldr	r0, [pc, #68]	@ (8000660 <LedTask_Handler+0xbc>)
 800061a:	f001 febb 	bl	8002394 <HAL_GPIO_WritePin>
        vTaskDelay(pdMS_TO_TICKS(on_time));
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000624:	fb02 f303 	mul.w	r3, r2, r3
 8000628:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <LedTask_Handler+0xc0>)
 800062a:	fba2 2303 	umull	r2, r3, r2, r3
 800062e:	099b      	lsrs	r3, r3, #6
 8000630:	4618      	mov	r0, r3
 8000632:	f005 f8db 	bl	80057ec <vTaskDelay>

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // LED OFF
 8000636:	2201      	movs	r2, #1
 8000638:	2120      	movs	r1, #32
 800063a:	4809      	ldr	r0, [pc, #36]	@ (8000660 <LedTask_Handler+0xbc>)
 800063c:	f001 feaa 	bl	8002394 <HAL_GPIO_WritePin>
        vTaskDelay(pdMS_TO_TICKS(off_time));
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <LedTask_Handler+0xc0>)
 800064c:	fba2 2303 	umull	r2, r3, r2, r3
 8000650:	099b      	lsrs	r3, r3, #6
 8000652:	4618      	mov	r0, r3
 8000654:	f005 f8ca 	bl	80057ec <vTaskDelay>
        if (xQueueReceive(xLedModeQueue, &current_mode, pdMS_TO_TICKS(10)) == pdPASS)
 8000658:	e7b0      	b.n	80005bc <LedTask_Handler+0x18>
 800065a:	bf00      	nop
 800065c:	2000007c 	.word	0x2000007c
 8000660:	40020000 	.word	0x40020000
 8000664:	10624dd3 	.word	0x10624dd3

08000668 <LM35_Handler>:

/******************************************************************************
*							API IMPLEMENTATION
******************************************************************************/
void LM35_Handler(void *pvParameters)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	LedMode_t mode;

    for (;;)
    {
        HAL_ADC_Start(&hadc1);
 8000670:	482c      	ldr	r0, [pc, #176]	@ (8000724 <LM35_Handler+0xbc>)
 8000672:	f000 ff51 	bl	8001518 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, LM35_ADC_TIMEOUT) == HAL_OK)
 8000676:	2164      	movs	r1, #100	@ 0x64
 8000678:	482a      	ldr	r0, [pc, #168]	@ (8000724 <LM35_Handler+0xbc>)
 800067a:	f001 f852 	bl	8001722 <HAL_ADC_PollForConversion>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d12c      	bne.n	80006de <LM35_Handler+0x76>
        {
            lm35_data.adc_raw = HAL_ADC_GetValue(&hadc1);
 8000684:	4827      	ldr	r0, [pc, #156]	@ (8000724 <LM35_Handler+0xbc>)
 8000686:	f001 f8d7 	bl	8001838 <HAL_ADC_GetValue>
 800068a:	4603      	mov	r3, r0
 800068c:	4a26      	ldr	r2, [pc, #152]	@ (8000728 <LM35_Handler+0xc0>)
 800068e:	6013      	str	r3, [r2, #0]
            lm35_data.adc_timeout_error = false;
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <LM35_Handler+0xc0>)
 8000692:	2200      	movs	r2, #0
 8000694:	721a      	strb	r2, [r3, #8]

            if (lm35_data.adc_raw < LM35_DISCONNECT_ADC)
 8000696:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <LM35_Handler+0xc0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b1d      	cmp	r3, #29
 800069c:	d806      	bhi.n	80006ac <LM35_Handler+0x44>
            {
                lm35_data.sensor_disconnected = true;
 800069e:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <LM35_Handler+0xc0>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	725a      	strb	r2, [r3, #9]
                lm35_data.temperature_c = -100.0f;
 80006a4:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <LM35_Handler+0xc0>)
 80006a6:	4a21      	ldr	r2, [pc, #132]	@ (800072c <LM35_Handler+0xc4>)
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	e01b      	b.n	80006e4 <LM35_Handler+0x7c>
            }
            else
            {
                lm35_data.sensor_disconnected = false;
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <LM35_Handler+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	725a      	strb	r2, [r3, #9]
                lm35_data.temperature_c = ((float)(lm35_data.adc_raw) * 3.3f * 100.0f) / 4095.0f;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <LM35_Handler+0xc0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	ee07 3a90 	vmov	s15, r3
 80006ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006be:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000730 <LM35_Handler+0xc8>
 80006c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000734 <LM35_Handler+0xcc>
 80006ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006ce:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8000738 <LM35_Handler+0xd0>
 80006d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <LM35_Handler+0xc0>)
 80006d8:	edc3 7a01 	vstr	s15, [r3, #4]
 80006dc:	e002      	b.n	80006e4 <LM35_Handler+0x7c>
            }
        }
        else
        {
            lm35_data.adc_timeout_error = true;
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <LM35_Handler+0xc0>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	721a      	strb	r2, [r3, #8]
        }


        if (lm35_data.sensor_disconnected)
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <LM35_Handler+0xc0>)
 80006e6:	7a5b      	ldrb	r3, [r3, #9]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <LM35_Handler+0x8a>
        {
            mode = LED_MODE_SENSOR_FAIL;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e008      	b.n	8000704 <LM35_Handler+0x9c>
        }
        else if (lm35_data.adc_timeout_error)
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <LM35_Handler+0xc0>)
 80006f4:	7a1b      	ldrb	r3, [r3, #8]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <LM35_Handler+0x98>
        {
            mode = LED_MODE_ADC_ERROR;
 80006fa:	2302      	movs	r3, #2
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	e001      	b.n	8000704 <LM35_Handler+0x9c>
        }
        else
        {
            mode = LED_MODE_NORMAL;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]
        }

        /* Update the xLedModeQueue with Mode to enable the LED pattern */
        xQueueSend(xLedModeQueue, &mode, 0);
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <LM35_Handler+0xd4>)
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	f107 010f 	add.w	r1, r7, #15
 800070c:	2300      	movs	r3, #0
 800070e:	2200      	movs	r2, #0
 8000710:	f004 fabe 	bl	8004c90 <xQueueGenericSend>
        HAL_ADC_Stop(&hadc1);
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <LM35_Handler+0xbc>)
 8000716:	f000 ffd1 	bl	80016bc <HAL_ADC_Stop>
        vTaskDelay(LM35_SAMPLING_DELAY);
 800071a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071e:	f005 f865 	bl	80057ec <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8000722:	e7a5      	b.n	8000670 <LM35_Handler+0x8>
 8000724:	2000008c 	.word	0x2000008c
 8000728:	20000080 	.word	0x20000080
 800072c:	c2c80000 	.word	0xc2c80000
 8000730:	40533333 	.word	0x40533333
 8000734:	42c80000 	.word	0x42c80000
 8000738:	457ff000 	.word	0x457ff000
 800073c:	2000007c 	.word	0x2000007c

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fe62 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f816 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f000 fa68 	bl	8000c20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000750:	f000 fa12 	bl	8000b78 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000754:	f000 f882 	bl	800085c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000758:	f000 f9e4 	bl	8000b24 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800075c:	f000 f968 	bl	8000a30 <MX_TIM4_Init>
  MX_CAN1_Init();
 8000760:	f000 f8ce 	bl	8000900 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000764:	f000 f92e 	bl	80009c4 <MX_SPI1_Init>
  MX_I2C3_Init();
 8000768:	f000 f8fe 	bl	8000968 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 800076c:	f000 fa2e 	bl	8000bcc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  App_Run();
 8000770:	f7ff fee4 	bl	800053c <App_Run>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <main+0x34>

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2234      	movs	r2, #52	@ 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fd46 	bl	8007218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <SystemClock_Config+0xdc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000854 <SystemClock_Config+0xdc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ac:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <SystemClock_Config+0xdc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <SystemClock_Config+0xe0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a25      	ldr	r2, [pc, #148]	@ (8000858 <SystemClock_Config+0xe0>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <SystemClock_Config+0xe0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007ec:	23b4      	movs	r3, #180	@ 0xb4
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4618      	mov	r0, r3
 8000802:	f002 faf1 	bl	8002de8 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800080c:	f000 fa88 	bl	8000d20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000810:	f001 ff1e 	bl	8002650 <HAL_PWREx_EnableOverDrive>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800081a:	f000 fa81 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800082e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000834:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2105      	movs	r1, #5
 800083c:	4618      	mov	r0, r3
 800083e:	f001 ff57 	bl	80026f0 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000848:	f000 fa6a 	bl	8000d20 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	@ 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800087a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <MX_ADC1_Init+0xa0>)
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008be:	f000 fde7 	bl	8001490 <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 fa2a 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008de:	f000 ffb9 	bl	8001854 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fa1a 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_CAN1_Init+0x60>)
 8000906:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <MX_CAN1_Init+0x64>)
 8000908:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_CAN1_Init+0x60>)
 800090c:	2210      	movs	r2, #16
 800090e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000910:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_CAN1_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_CAN1_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800091c:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MX_CAN1_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_CAN1_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000928:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <MX_CAN1_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_CAN1_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <MX_CAN1_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_CAN1_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <MX_CAN1_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_CAN1_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_CAN1_Init+0x60>)
 800094e:	f001 f9af 	bl	8001cb0 <HAL_CAN_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 f9e2 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000d4 	.word	0x200000d4
 8000964:	40006400 	.word	0x40006400

08000968 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_I2C3_Init+0x50>)
 800096e:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <MX_I2C3_Init+0x54>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_I2C3_Init+0x50>)
 8000974:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <MX_I2C3_Init+0x58>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_I2C3_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_I2C3_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_I2C3_Init+0x50>)
 8000986:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800098a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <MX_I2C3_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_I2C3_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <MX_I2C3_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_I2C3_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_I2C3_Init+0x50>)
 80009a6:	f001 fd0f 	bl	80023c8 <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 f9b6 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000fc 	.word	0x200000fc
 80009bc:	40005c00 	.word	0x40005c00
 80009c0:	000186a0 	.word	0x000186a0

080009c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_SPI1_Init+0x64>)
 80009ca:	4a18      	ldr	r2, [pc, #96]	@ (8000a2c <MX_SPI1_Init+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_SPI1_Init+0x64>)
 80009d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_SPI1_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_SPI1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_SPI1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_SPI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_SPI1_Init+0x64>)
 80009f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <MX_SPI1_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_SPI1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <MX_SPI1_Init+0x64>)
 8000a10:	220a      	movs	r2, #10
 8000a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_SPI1_Init+0x64>)
 8000a16:	f002 fc85 	bl	8003324 <HAL_SPI_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a20:	f000 f97e 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000150 	.word	0x20000150
 8000a2c:	40013000 	.word	0x40013000

08000a30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	@ 0x38
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a62:	4b2e      	ldr	r3, [pc, #184]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000a64:	4a2e      	ldr	r2, [pc, #184]	@ (8000b20 <MX_TIM4_Init+0xf0>)
 8000a66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000a68:	4b2c      	ldr	r3, [pc, #176]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000a6a:	2253      	movs	r2, #83	@ 0x53
 8000a6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000a74:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000a76:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a88:	4824      	ldr	r0, [pc, #144]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000a8a:	f002 fcd4 	bl	8003436 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a94:	f000 f944 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a98:	4820      	ldr	r0, [pc, #128]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000a9a:	f002 fd8b 	bl	80035b4 <HAL_TIM_PWM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000aa4:	f000 f93c 	bl	8000d20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000aac:	2320      	movs	r3, #32
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4819      	ldr	r0, [pc, #100]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000ab8:	f002 ff88 	bl	80039cc <HAL_TIM_SlaveConfigSynchro>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000ac2:	f000 f92d 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4811      	ldr	r0, [pc, #68]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000ad6:	f003 fb49 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000ae0:	f000 f91e 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae4:	2360      	movs	r3, #96	@ 0x60
 8000ae6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8000ae8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000aec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000afe:	f002 fea3 	bl	8003848 <HAL_TIM_PWM_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000b08:	f000 f90a 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b0c:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000b0e:	f000 fab9 	bl	8001084 <HAL_TIM_MspPostInit>

}
 8000b12:	bf00      	nop
 8000b14:	3738      	adds	r7, #56	@ 0x38
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200001a8 	.word	0x200001a8
 8000b20:	40000800 	.word	0x40000800

08000b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <MX_USART1_UART_Init+0x50>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b5c:	f003 fb96 	bl	800428c <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b66:	f000 f8db 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200001f0 	.word	0x200001f0
 8000b74:	40011000 	.word	0x40011000

08000b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <MX_USART2_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	f003 fb6c 	bl	800428c <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f8b1 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000238 	.word	0x20000238
 8000bc8:	40004400 	.word	0x40004400

08000bcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_USART3_UART_Init+0x4c>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <MX_USART3_UART_Init+0x50>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <MX_USART3_UART_Init+0x4c>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_USART3_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <MX_USART3_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <MX_USART3_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_USART3_UART_Init+0x4c>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <MX_USART3_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <MX_USART3_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_USART3_UART_Init+0x4c>)
 8000c04:	f003 fb42 	bl	800428c <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c0e:	f000 f887 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000280 	.word	0x20000280
 8000c1c:	40004800 	.word	0x40004800

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a25      	ldr	r2, [pc, #148]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MX_GPIO_Init+0xd0>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4812      	ldr	r0, [pc, #72]	@ (8000cf4 <MX_GPIO_Init+0xd4>)
 8000cac:	f001 fb72 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <MX_GPIO_Init+0xd8>)
 8000cc6:	f001 f9d1 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <MX_GPIO_Init+0xd4>)
 8000ce2:	f001 f9c3 	bl	800206c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	@ 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020800 	.word	0x40020800

08000cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d101      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d0e:	f000 fb9f 	bl	8001450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40010000 	.word	0x40010000

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_MspInit+0x54>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	4a11      	ldr	r2, [pc, #68]	@ (8000d80 <HAL_MspInit+0x54>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_MspInit+0x54>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <HAL_MspInit+0x54>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <HAL_MspInit+0x54>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5e:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_MspInit+0x54>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	210f      	movs	r1, #15
 8000d6e:	f06f 0001 	mvn.w	r0, #1
 8000d72:	f001 f951 	bl	8002018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a17      	ldr	r2, [pc, #92]	@ (8000e00 <HAL_ADC_MspInit+0x7c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d127      	bne.n	8000df6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a15      	ldr	r2, [pc, #84]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a0e      	ldr	r2, [pc, #56]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dde:	2301      	movs	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de2:	2303      	movs	r3, #3
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <HAL_ADC_MspInit+0x84>)
 8000df2:	f001 f93b 	bl	800206c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	@ 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40012000 	.word	0x40012000
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000

08000e0c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	@ (8000e90 <HAL_CAN_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12c      	bne.n	8000e88 <HAL_CAN_MspInit+0x7c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_CAN_MspInit+0x88>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <HAL_CAN_MspInit+0x88>)
 8000e38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_CAN_MspInit+0x88>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_CAN_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <HAL_CAN_MspInit+0x88>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_CAN_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e78:	2309      	movs	r3, #9
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <HAL_CAN_MspInit+0x8c>)
 8000e84:	f001 f8f2 	bl	800206c <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	@ 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40006400 	.word	0x40006400
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400

08000e9c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a29      	ldr	r2, [pc, #164]	@ (8000f60 <HAL_I2C_MspInit+0xc4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d14b      	bne.n	8000f56 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b28      	ldr	r3, [pc, #160]	@ (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a27      	ldr	r2, [pc, #156]	@ (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a20      	ldr	r2, [pc, #128]	@ (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4815      	ldr	r0, [pc, #84]	@ (8000f68 <HAL_I2C_MspInit+0xcc>)
 8000f14:	f001 f8aa 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1e:	2312      	movs	r3, #18
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <HAL_I2C_MspInit+0xd0>)
 8000f36:	f001 f899 	bl	800206c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000f44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	@ 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40005c00 	.word	0x40005c00
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a28      	ldr	r2, [pc, #160]	@ (8001030 <HAL_SPI_MspInit+0xc0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d149      	bne.n	8001026 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <HAL_SPI_MspInit+0xc4>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <HAL_SPI_MspInit+0xc4>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa2:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <HAL_SPI_MspInit+0xc4>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <HAL_SPI_MspInit+0xc4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001034 <HAL_SPI_MspInit+0xc4>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <HAL_SPI_MspInit+0xc4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <HAL_SPI_MspInit+0xc4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a18      	ldr	r2, [pc, #96]	@ (8001034 <HAL_SPI_MspInit+0xc4>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_SPI_MspInit+0xc4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	480d      	ldr	r0, [pc, #52]	@ (8001038 <HAL_SPI_MspInit+0xc8>)
 8001002:	f001 f833 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001006:	2338      	movs	r3, #56	@ 0x38
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001016:	2305      	movs	r3, #5
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4806      	ldr	r0, [pc, #24]	@ (800103c <HAL_SPI_MspInit+0xcc>)
 8001022:	f001 f823 	bl	800206c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	@ 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40013000 	.word	0x40013000
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400

08001040 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <HAL_TIM_Base_MspInit+0x3c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10d      	bne.n	800106e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_TIM_Base_MspInit+0x40>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <HAL_TIM_Base_MspInit+0x40>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <HAL_TIM_Base_MspInit+0x40>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40000800 	.word	0x40000800
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <HAL_TIM_MspPostInit+0x68>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d11d      	bne.n	80010e2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_TIM_MspPostInit+0x6c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <HAL_TIM_MspPostInit+0x6c>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <HAL_TIM_MspPostInit+0x6c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010c2:	2340      	movs	r3, #64	@ 0x40
 80010c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <HAL_TIM_MspPostInit+0x70>)
 80010de:	f000 ffc5 	bl	800206c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40000800 	.word	0x40000800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	@ 0x38
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_UART_MspInit+0x150>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12d      	bne.n	8001176 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
 800111e:	4b4b      	ldr	r3, [pc, #300]	@ (800124c <HAL_UART_MspInit+0x154>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	4a4a      	ldr	r2, [pc, #296]	@ (800124c <HAL_UART_MspInit+0x154>)
 8001124:	f043 0310 	orr.w	r3, r3, #16
 8001128:	6453      	str	r3, [r2, #68]	@ 0x44
 800112a:	4b48      	ldr	r3, [pc, #288]	@ (800124c <HAL_UART_MspInit+0x154>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	4b44      	ldr	r3, [pc, #272]	@ (800124c <HAL_UART_MspInit+0x154>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a43      	ldr	r2, [pc, #268]	@ (800124c <HAL_UART_MspInit+0x154>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b41      	ldr	r3, [pc, #260]	@ (800124c <HAL_UART_MspInit+0x154>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001152:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001164:	2307      	movs	r3, #7
 8001166:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116c:	4619      	mov	r1, r3
 800116e:	4838      	ldr	r0, [pc, #224]	@ (8001250 <HAL_UART_MspInit+0x158>)
 8001170:	f000 ff7c 	bl	800206c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001174:	e063      	b.n	800123e <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a36      	ldr	r2, [pc, #216]	@ (8001254 <HAL_UART_MspInit+0x15c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d12c      	bne.n	80011da <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	4b31      	ldr	r3, [pc, #196]	@ (800124c <HAL_UART_MspInit+0x154>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	4a30      	ldr	r2, [pc, #192]	@ (800124c <HAL_UART_MspInit+0x154>)
 800118a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001190:	4b2e      	ldr	r3, [pc, #184]	@ (800124c <HAL_UART_MspInit+0x154>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <HAL_UART_MspInit+0x154>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	4a29      	ldr	r2, [pc, #164]	@ (800124c <HAL_UART_MspInit+0x154>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ac:	4b27      	ldr	r3, [pc, #156]	@ (800124c <HAL_UART_MspInit+0x154>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011b8:	230c      	movs	r3, #12
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c8:	2307      	movs	r3, #7
 80011ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	481f      	ldr	r0, [pc, #124]	@ (8001250 <HAL_UART_MspInit+0x158>)
 80011d4:	f000 ff4a 	bl	800206c <HAL_GPIO_Init>
}
 80011d8:	e031      	b.n	800123e <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <HAL_UART_MspInit+0x160>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d12c      	bne.n	800123e <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_UART_MspInit+0x154>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	4a17      	ldr	r2, [pc, #92]	@ (800124c <HAL_UART_MspInit+0x154>)
 80011ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_UART_MspInit+0x154>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <HAL_UART_MspInit+0x154>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	4a10      	ldr	r2, [pc, #64]	@ (800124c <HAL_UART_MspInit+0x154>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_UART_MspInit+0x154>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800121c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800122e:	2307      	movs	r3, #7
 8001230:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4808      	ldr	r0, [pc, #32]	@ (800125c <HAL_UART_MspInit+0x164>)
 800123a:	f000 ff17 	bl	800206c <HAL_GPIO_Init>
}
 800123e:	bf00      	nop
 8001240:	3738      	adds	r7, #56	@ 0x38
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40011000 	.word	0x40011000
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	40004400 	.word	0x40004400
 8001258:	40004800 	.word	0x40004800
 800125c:	40020800 	.word	0x40020800

08001260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	@ 0x30
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <HAL_InitTick+0xd4>)
 8001276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001278:	4a2e      	ldr	r2, [pc, #184]	@ (8001334 <HAL_InitTick+0xd4>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001280:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <HAL_InitTick+0xd4>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800128c:	f107 020c 	add.w	r2, r7, #12
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fb44 	bl	8002924 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800129c:	f001 fb2e 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80012a0:	4603      	mov	r3, r0
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a8:	4a23      	ldr	r2, [pc, #140]	@ (8001338 <HAL_InitTick+0xd8>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0c9b      	lsrs	r3, r3, #18
 80012b0:	3b01      	subs	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <HAL_InitTick+0xdc>)
 80012b6:	4a22      	ldr	r2, [pc, #136]	@ (8001340 <HAL_InitTick+0xe0>)
 80012b8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HAL_InitTick+0xdc>)
 80012bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012c2:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <HAL_InitTick+0xdc>)
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <HAL_InitTick+0xdc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_InitTick+0xdc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b19      	ldr	r3, [pc, #100]	@ (800133c <HAL_InitTick+0xdc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012da:	4818      	ldr	r0, [pc, #96]	@ (800133c <HAL_InitTick+0xdc>)
 80012dc:	f002 f8ab 	bl	8003436 <HAL_TIM_Base_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80012e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11b      	bne.n	8001326 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012ee:	4813      	ldr	r0, [pc, #76]	@ (800133c <HAL_InitTick+0xdc>)
 80012f0:	f002 f8f0 	bl	80034d4 <HAL_TIM_Base_Start_IT>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80012fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d111      	bne.n	8001326 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001302:	2019      	movs	r0, #25
 8001304:	f000 fea4 	bl	8002050 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	d808      	bhi.n	8001320 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800130e:	2200      	movs	r2, #0
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	2019      	movs	r0, #25
 8001314:	f000 fe80 	bl	8002018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001318:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <HAL_InitTick+0xe4>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e002      	b.n	8001326 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001326:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800132a:	4618      	mov	r0, r3
 800132c:	3730      	adds	r7, #48	@ 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	431bde83 	.word	0x431bde83
 800133c:	200002c8 	.word	0x200002c8
 8001340:	40010000 	.word	0x40010000
 8001344:	20000004 	.word	0x20000004

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <NMI_Handler+0x4>

08001350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <MemManage_Handler+0x4>

08001360 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <UsageFault_Handler+0x4>

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001386:	f002 f96e 	bl	8003666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002c8 	.word	0x200002c8

08001394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <SystemInit+0x20>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <SystemInit+0x20>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013bc:	f7ff ffea 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	@ (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013e6:	f005 ff7d 	bl	80072e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff f9a9 	bl	8000740 <main>
  bx  lr    
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013fc:	0800745c 	.word	0x0800745c
  ldr r2, =_sbss
 8001400:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001404:	20004e38 	.word	0x20004e38

08001408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <HAL_Init+0x40>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800141a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <HAL_Init+0x40>)
 8001422:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	@ (800144c <HAL_Init+0x40>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 fde4 	bl	8002002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff ff10 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fc74 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008
 8001474:	20000310 	.word	0x20000310

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000310 	.word	0x20000310

08001490 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e033      	b.n	800150e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fc68 	bl	8000d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014d6:	f023 0302 	bic.w	r3, r3, #2
 80014da:	f043 0202 	orr.w	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fae8 	bl	8001ab8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80014fe:	e001      	b.n	8001504 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_ADC_Start+0x1a>
 800152e:	2302      	movs	r3, #2
 8001530:	e0b2      	b.n	8001698 <HAL_ADC_Start+0x180>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d018      	beq.n	800157a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001558:	4b52      	ldr	r3, [pc, #328]	@ (80016a4 <HAL_ADC_Start+0x18c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a52      	ldr	r2, [pc, #328]	@ (80016a8 <HAL_ADC_Start+0x190>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0c9a      	lsrs	r2, r3, #18
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800156c:	e002      	b.n	8001574 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3b01      	subs	r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f9      	bne.n	800156e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d17a      	bne.n	800167e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015c6:	d106      	bne.n	80015d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015cc:	f023 0206 	bic.w	r2, r3, #6
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80015d4:	e002      	b.n	80015dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b31      	ldr	r3, [pc, #196]	@ (80016ac <HAL_ADC_Start+0x194>)
 80015e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80015f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d12a      	bne.n	8001654 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a2b      	ldr	r2, [pc, #172]	@ (80016b0 <HAL_ADC_Start+0x198>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d015      	beq.n	8001634 <HAL_ADC_Start+0x11c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a29      	ldr	r2, [pc, #164]	@ (80016b4 <HAL_ADC_Start+0x19c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d105      	bne.n	800161e <HAL_ADC_Start+0x106>
 8001612:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <HAL_ADC_Start+0x194>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00a      	beq.n	8001634 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a25      	ldr	r2, [pc, #148]	@ (80016b8 <HAL_ADC_Start+0x1a0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d136      	bne.n	8001696 <HAL_ADC_Start+0x17e>
 8001628:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_ADC_Start+0x194>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d130      	bne.n	8001696 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d129      	bne.n	8001696 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	e020      	b.n	8001696 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a15      	ldr	r2, [pc, #84]	@ (80016b0 <HAL_ADC_Start+0x198>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d11b      	bne.n	8001696 <HAL_ADC_Start+0x17e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d114      	bne.n	8001696 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	e00b      	b.n	8001696 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f043 0210 	orr.w	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20000000 	.word	0x20000000
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	40012300 	.word	0x40012300
 80016b0:	40012000 	.word	0x40012000
 80016b4:	40012100 	.word	0x40012100
 80016b8:	40012200 	.word	0x40012200

080016bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_Stop+0x16>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e021      	b.n	8001716 <HAL_ADC_Stop+0x5a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800173e:	d113      	bne.n	8001768 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800174a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800174e:	d10b      	bne.n	8001768 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f043 0220 	orr.w	r2, r3, #32
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e063      	b.n	8001830 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001768:	f7ff fe86 	bl	8001478 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800176e:	e021      	b.n	80017b4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001776:	d01d      	beq.n	80017b4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <HAL_ADC_PollForConversion+0x6c>
 800177e:	f7ff fe7b 	bl	8001478 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d212      	bcs.n	80017b4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b02      	cmp	r3, #2
 800179a:	d00b      	beq.n	80017b4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	f043 0204 	orr.w	r2, r3, #4
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e03d      	b.n	8001830 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d1d6      	bne.n	8001770 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f06f 0212 	mvn.w	r2, #18
 80017ca:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d123      	bne.n	800182e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d11f      	bne.n	800182e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001806:	2b00      	cmp	r3, #0
 8001808:	d111      	bne.n	800182e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1c>
 800186c:	2302      	movs	r3, #2
 800186e:	e113      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x244>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b09      	cmp	r3, #9
 800187e:	d925      	bls.n	80018cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68d9      	ldr	r1, [r3, #12]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	3b1e      	subs	r3, #30
 8001896:	2207      	movs	r2, #7
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43da      	mvns	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	400a      	ands	r2, r1
 80018a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68d9      	ldr	r1, [r3, #12]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	4603      	mov	r3, r0
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4403      	add	r3, r0
 80018be:	3b1e      	subs	r3, #30
 80018c0:	409a      	lsls	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	e022      	b.n	8001912 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6919      	ldr	r1, [r3, #16]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	2207      	movs	r2, #7
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	400a      	ands	r2, r1
 80018ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6919      	ldr	r1, [r3, #16]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	4603      	mov	r3, r0
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4403      	add	r3, r0
 8001908:	409a      	lsls	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b06      	cmp	r3, #6
 8001918:	d824      	bhi.n	8001964 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	3b05      	subs	r3, #5
 800192c:	221f      	movs	r2, #31
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	400a      	ands	r2, r1
 800193a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	3b05      	subs	r3, #5
 8001956:	fa00 f203 	lsl.w	r2, r0, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	635a      	str	r2, [r3, #52]	@ 0x34
 8001962:	e04c      	b.n	80019fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b0c      	cmp	r3, #12
 800196a:	d824      	bhi.n	80019b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	3b23      	subs	r3, #35	@ 0x23
 800197e:	221f      	movs	r2, #31
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43da      	mvns	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	400a      	ands	r2, r1
 800198c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	4618      	mov	r0, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	3b23      	subs	r3, #35	@ 0x23
 80019a8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80019b4:	e023      	b.n	80019fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	3b41      	subs	r3, #65	@ 0x41
 80019c8:	221f      	movs	r2, #31
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	400a      	ands	r2, r1
 80019d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4618      	mov	r0, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	3b41      	subs	r3, #65	@ 0x41
 80019f2:	fa00 f203 	lsl.w	r2, r0, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fe:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x250>)
 8001a00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a28      	ldr	r2, [pc, #160]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x254>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d10f      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1d8>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b12      	cmp	r3, #18
 8001a12:	d10b      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x254>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12b      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x23a>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aac <HAL_ADC_ConfigChannel+0x258>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d003      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0x1f4>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b11      	cmp	r3, #17
 8001a46:	d122      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_ADC_ConfigChannel+0x258>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d111      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x25c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x260>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9a      	lsrs	r2, r3, #18
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f9      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40012300 	.word	0x40012300
 8001aa8:	40012000 	.word	0x40012000
 8001aac:	10000012 	.word	0x10000012
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac0:	4b79      	ldr	r3, [pc, #484]	@ (8001ca8 <ADC_Init+0x1f0>)
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	021a      	lsls	r2, r3, #8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4a:	4a58      	ldr	r2, [pc, #352]	@ (8001cac <ADC_Init+0x1f4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d022      	beq.n	8001b96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6899      	ldr	r1, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6899      	ldr	r1, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	e00f      	b.n	8001bb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0202 	bic.w	r2, r2, #2
 8001bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7e1b      	ldrb	r3, [r3, #24]
 8001bd0:	005a      	lsls	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01b      	beq.n	8001c1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bf2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	035a      	lsls	r2, r3, #13
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	e007      	b.n	8001c2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	051a      	lsls	r2, r3, #20
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6899      	ldr	r1, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c6e:	025a      	lsls	r2, r3, #9
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6899      	ldr	r1, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	029a      	lsls	r2, r3, #10
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40012300 	.word	0x40012300
 8001cac:	0f000001 	.word	0x0f000001

08001cb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0ed      	b.n	8001e9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d102      	bne.n	8001cd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff f89c 	bl	8000e0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce4:	f7ff fbc8 	bl	8001478 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cea:	e012      	b.n	8001d12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cec:	f7ff fbc4 	bl	8001478 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	d90b      	bls.n	8001d12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2205      	movs	r2, #5
 8001d0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0c5      	b.n	8001e9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0e5      	beq.n	8001cec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0202 	bic.w	r2, r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d30:	f7ff fba2 	bl	8001478 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d36:	e012      	b.n	8001d5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d38:	f7ff fb9e 	bl	8001478 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b0a      	cmp	r3, #10
 8001d44:	d90b      	bls.n	8001d5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2205      	movs	r2, #5
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e09f      	b.n	8001e9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e5      	bne.n	8001d38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7e1b      	ldrb	r3, [r3, #24]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d108      	bne.n	8001d86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e007      	b.n	8001d96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7e5b      	ldrb	r3, [r3, #25]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e007      	b.n	8001dc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7e9b      	ldrb	r3, [r3, #26]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d108      	bne.n	8001dda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0220 	bic.w	r2, r2, #32
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7edb      	ldrb	r3, [r3, #27]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0210 	bic.w	r2, r2, #16
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e007      	b.n	8001e14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0210 	orr.w	r2, r2, #16
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7f1b      	ldrb	r3, [r3, #28]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0208 	orr.w	r2, r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e007      	b.n	8001e3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0208 	bic.w	r2, r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7f5b      	ldrb	r3, [r3, #29]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0204 	orr.w	r2, r2, #4
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0204 	bic.w	r2, r2, #4
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	ea42 0103 	orr.w	r1, r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	1e5a      	subs	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	@ (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff4c 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202a:	f7ff ff61 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 800202e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	6978      	ldr	r0, [r7, #20]
 8002036:	f7ff ffb1 	bl	8001f9c <NVIC_EncodePriority>
 800203a:	4602      	mov	r2, r0
 800203c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff80 	bl	8001f48 <__NVIC_SetPriority>
}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff54 	bl	8001f0c <__NVIC_EnableIRQ>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e165      	b.n	8002354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f040 8154 	bne.w	800234e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d005      	beq.n	80020be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d130      	bne.n	8002120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 0201 	and.w	r2, r3, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b03      	cmp	r3, #3
 800212a:	d017      	beq.n	800215c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d123      	bne.n	80021b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80ae 	beq.w	800234e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b5d      	ldr	r3, [pc, #372]	@ (800236c <HAL_GPIO_Init+0x300>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	4a5c      	ldr	r2, [pc, #368]	@ (800236c <HAL_GPIO_Init+0x300>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002200:	6453      	str	r3, [r2, #68]	@ 0x44
 8002202:	4b5a      	ldr	r3, [pc, #360]	@ (800236c <HAL_GPIO_Init+0x300>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220e:	4a58      	ldr	r2, [pc, #352]	@ (8002370 <HAL_GPIO_Init+0x304>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	@ (8002374 <HAL_GPIO_Init+0x308>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x21a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4e      	ldr	r2, [pc, #312]	@ (8002378 <HAL_GPIO_Init+0x30c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x216>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4d      	ldr	r2, [pc, #308]	@ (800237c <HAL_GPIO_Init+0x310>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x212>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4c      	ldr	r2, [pc, #304]	@ (8002380 <HAL_GPIO_Init+0x314>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	@ (8002384 <HAL_GPIO_Init+0x318>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x20a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4a      	ldr	r2, [pc, #296]	@ (8002388 <HAL_GPIO_Init+0x31c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x206>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a49      	ldr	r2, [pc, #292]	@ (800238c <HAL_GPIO_Init+0x320>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x202>
 800226a:	2306      	movs	r3, #6
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800226e:	2307      	movs	r3, #7
 8002270:	e00a      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002272:	2305      	movs	r3, #5
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002276:	2304      	movs	r3, #4
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	@ (8002370 <HAL_GPIO_Init+0x304>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a31      	ldr	r2, [pc, #196]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a26      	ldr	r2, [pc, #152]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fa:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231e:	4a1c      	ldr	r2, [pc, #112]	@ (8002390 <HAL_GPIO_Init+0x324>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002324:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <HAL_GPIO_Init+0x324>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002348:	4a11      	ldr	r2, [pc, #68]	@ (8002390 <HAL_GPIO_Init+0x324>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f ae96 	bls.w	8002088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40021400 	.word	0x40021400
 800238c:	40021800 	.word	0x40021800
 8002390:	40013c00 	.word	0x40013c00

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b0:	e003      	b.n	80023ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e12b      	b.n	8002632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fd54 	bl	8000e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	@ 0x24
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800241a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800242a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800242c:	f000 fa52 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8002430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4a81      	ldr	r2, [pc, #516]	@ (800263c <HAL_I2C_Init+0x274>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d807      	bhi.n	800244c <HAL_I2C_Init+0x84>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a80      	ldr	r2, [pc, #512]	@ (8002640 <HAL_I2C_Init+0x278>)
 8002440:	4293      	cmp	r3, r2
 8002442:	bf94      	ite	ls
 8002444:	2301      	movls	r3, #1
 8002446:	2300      	movhi	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e006      	b.n	800245a <HAL_I2C_Init+0x92>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4a7d      	ldr	r2, [pc, #500]	@ (8002644 <HAL_I2C_Init+0x27c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	bf94      	ite	ls
 8002454:	2301      	movls	r3, #1
 8002456:	2300      	movhi	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0e7      	b.n	8002632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a78      	ldr	r2, [pc, #480]	@ (8002648 <HAL_I2C_Init+0x280>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0c9b      	lsrs	r3, r3, #18
 800246c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a6a      	ldr	r2, [pc, #424]	@ (800263c <HAL_I2C_Init+0x274>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d802      	bhi.n	800249c <HAL_I2C_Init+0xd4>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3301      	adds	r3, #1
 800249a:	e009      	b.n	80024b0 <HAL_I2C_Init+0xe8>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	4a69      	ldr	r2, [pc, #420]	@ (800264c <HAL_I2C_Init+0x284>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	3301      	adds	r3, #1
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	495c      	ldr	r1, [pc, #368]	@ (800263c <HAL_I2C_Init+0x274>)
 80024cc:	428b      	cmp	r3, r1
 80024ce:	d819      	bhi.n	8002504 <HAL_I2C_Init+0x13c>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1e59      	subs	r1, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fbb1 f3f3 	udiv	r3, r1, r3
 80024de:	1c59      	adds	r1, r3, #1
 80024e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024e4:	400b      	ands	r3, r1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_I2C_Init+0x138>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1e59      	subs	r1, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fe:	e051      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 8002500:	2304      	movs	r3, #4
 8002502:	e04f      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d111      	bne.n	8002530 <HAL_I2C_Init+0x168>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e58      	subs	r0, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	440b      	add	r3, r1
 800251a:	fbb0 f3f3 	udiv	r3, r0, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e012      	b.n	8002556 <HAL_I2C_Init+0x18e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1e58      	subs	r0, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	0099      	lsls	r1, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	fbb0 f3f3 	udiv	r3, r0, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Init+0x196>
 800255a:	2301      	movs	r3, #1
 800255c:	e022      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10e      	bne.n	8002584 <HAL_I2C_Init+0x1bc>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1e58      	subs	r0, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	440b      	add	r3, r1
 8002574:	fbb0 f3f3 	udiv	r3, r0, r3
 8002578:	3301      	adds	r3, #1
 800257a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002582:	e00f      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e58      	subs	r0, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	0099      	lsls	r1, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	6809      	ldr	r1, [r1, #0]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6911      	ldr	r1, [r2, #16]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68d2      	ldr	r2, [r2, #12]
 80025de:	4311      	orrs	r1, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	000186a0 	.word	0x000186a0
 8002640:	001e847f 	.word	0x001e847f
 8002644:	003d08ff 	.word	0x003d08ff
 8002648:	431bde83 	.word	0x431bde83
 800264c:	10624dd3 	.word	0x10624dd3

08002650 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	4a1f      	ldr	r2, [pc, #124]	@ (80026e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	@ 0x40
 800266a:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002676:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800267c:	f7fe fefc 	bl	8001478 <HAL_GetTick>
 8002680:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002682:	e009      	b.n	8002698 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002684:	f7fe fef8 	bl	8001478 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002692:	d901      	bls.n	8002698 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e01f      	b.n	80026d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a4:	d1ee      	bne.n	8002684 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026ac:	f7fe fee4 	bl	8001478 <HAL_GetTick>
 80026b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026b2:	e009      	b.n	80026c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026b4:	f7fe fee0 	bl	8001478 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026c2:	d901      	bls.n	80026c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e007      	b.n	80026d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026d4:	d1ee      	bne.n	80026b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	420e0040 	.word	0x420e0040
 80026e8:	40007000 	.word	0x40007000
 80026ec:	420e0044 	.word	0x420e0044

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0cc      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b68      	ldr	r3, [pc, #416]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d90c      	bls.n	800272c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b65      	ldr	r3, [pc, #404]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b63      	ldr	r3, [pc, #396]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a58      	ldr	r2, [pc, #352]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800274e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a52      	ldr	r2, [pc, #328]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b50      	ldr	r3, [pc, #320]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d044      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d119      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b3f      	ldr	r3, [pc, #252]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e067      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4934      	ldr	r1, [pc, #208]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fe4a 	bl	8001478 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fe46 	bl	8001478 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b25      	ldr	r3, [pc, #148]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d20c      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002876:	f000 f887 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490a      	ldr	r1, [pc, #40]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	@ (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fce2 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	08007434 	.word	0x08007434
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000000 	.word	0x20000000

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	@ (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08007444 	.word	0x08007444

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffdc 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0b5b      	lsrs	r3, r3, #13
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	@ (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	08007444 	.word	0x08007444

08002924 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	220f      	movs	r2, #15
 8002932:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002934:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002940:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <HAL_RCC_GetClockConfig+0x60>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	601a      	str	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40023c00 	.word	0x40023c00

08002988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800298c:	b0ae      	sub	sp, #184	@ 0xb8
 800298e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ae:	4bcb      	ldr	r3, [pc, #812]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	f200 8206 	bhi.w	8002dc8 <HAL_RCC_GetSysClockFreq+0x440>
 80029bc:	a201      	add	r2, pc, #4	@ (adr r2, 80029c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	080029f9 	.word	0x080029f9
 80029c8:	08002dc9 	.word	0x08002dc9
 80029cc:	08002dc9 	.word	0x08002dc9
 80029d0:	08002dc9 	.word	0x08002dc9
 80029d4:	08002a01 	.word	0x08002a01
 80029d8:	08002dc9 	.word	0x08002dc9
 80029dc:	08002dc9 	.word	0x08002dc9
 80029e0:	08002dc9 	.word	0x08002dc9
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002dc9 	.word	0x08002dc9
 80029ec:	08002dc9 	.word	0x08002dc9
 80029f0:	08002dc9 	.word	0x08002dc9
 80029f4:	08002bf9 	.word	0x08002bf9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x358>)
 80029fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029fe:	e1e7      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a00:	4bb8      	ldr	r3, [pc, #736]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a06:	e1e3      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a08:	4bb4      	ldr	r3, [pc, #720]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a14:	4bb1      	ldr	r3, [pc, #708]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d071      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4bae      	ldr	r3, [pc, #696]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a46:	4622      	mov	r2, r4
 8002a48:	462b      	mov	r3, r5
 8002a4a:	f04f 0000 	mov.w	r0, #0
 8002a4e:	f04f 0100 	mov.w	r1, #0
 8002a52:	0159      	lsls	r1, r3, #5
 8002a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a58:	0150      	lsls	r0, r2, #5
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4621      	mov	r1, r4
 8002a60:	1a51      	subs	r1, r2, r1
 8002a62:	6439      	str	r1, [r7, #64]	@ 0x40
 8002a64:	4629      	mov	r1, r5
 8002a66:	eb63 0301 	sbc.w	r3, r3, r1
 8002a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002a78:	4649      	mov	r1, r9
 8002a7a:	018b      	lsls	r3, r1, #6
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a82:	4641      	mov	r1, r8
 8002a84:	018a      	lsls	r2, r1, #6
 8002a86:	4641      	mov	r1, r8
 8002a88:	1a51      	subs	r1, r2, r1
 8002a8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a8c:	4649      	mov	r1, r9
 8002a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	00cb      	lsls	r3, r1, #3
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aaa:	4641      	mov	r1, r8
 8002aac:	00ca      	lsls	r2, r1, #3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	189b      	adds	r3, r3, r2
 8002ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aba:	462b      	mov	r3, r5
 8002abc:	460a      	mov	r2, r1
 8002abe:	eb42 0303 	adc.w	r3, r2, r3
 8002ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	024b      	lsls	r3, r1, #9
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ada:	4621      	mov	r1, r4
 8002adc:	024a      	lsls	r2, r1, #9
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002aec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002af0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002af4:	f7fd fb8c 	bl	8000210 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b02:	e067      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b04:	4b75      	ldr	r3, [pc, #468]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b1e:	2300      	movs	r3, #0
 8002b20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b38:	0150      	lsls	r0, r2, #5
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4621      	mov	r1, r4
 8002b40:	1a51      	subs	r1, r2, r1
 8002b42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b44:	4629      	mov	r1, r5
 8002b46:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002b58:	4649      	mov	r1, r9
 8002b5a:	018b      	lsls	r3, r1, #6
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b62:	4641      	mov	r1, r8
 8002b64:	018a      	lsls	r2, r1, #6
 8002b66:	4641      	mov	r1, r8
 8002b68:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b86:	4692      	mov	sl, r2
 8002b88:	469b      	mov	fp, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	eb1a 0303 	adds.w	r3, sl, r3
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	462b      	mov	r3, r5
 8002b94:	eb4b 0303 	adc.w	r3, fp, r3
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	028b      	lsls	r3, r1, #10
 8002baa:	4621      	mov	r1, r4
 8002bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	028a      	lsls	r2, r1, #10
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bc0:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002bc6:	f7fd fb23 	bl	8000210 <__aeabi_uldivmod>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4613      	mov	r3, r2
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bd4:	4b41      	ldr	r3, [pc, #260]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bf6:	e0eb      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf8:	4b38      	ldr	r3, [pc, #224]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c04:	4b35      	ldr	r3, [pc, #212]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d06b      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c10:	4b32      	ldr	r3, [pc, #200]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	2200      	movs	r2, #0
 8002c18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c22:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c24:	2300      	movs	r3, #0
 8002c26:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	462b      	mov	r3, r5
 8002c30:	f04f 0000 	mov.w	r0, #0
 8002c34:	f04f 0100 	mov.w	r1, #0
 8002c38:	0159      	lsls	r1, r3, #5
 8002c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3e:	0150      	lsls	r0, r2, #5
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4621      	mov	r1, r4
 8002c46:	1a51      	subs	r1, r2, r1
 8002c48:	61b9      	str	r1, [r7, #24]
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c5e:	4659      	mov	r1, fp
 8002c60:	018b      	lsls	r3, r1, #6
 8002c62:	4651      	mov	r1, sl
 8002c64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c68:	4651      	mov	r1, sl
 8002c6a:	018a      	lsls	r2, r1, #6
 8002c6c:	4651      	mov	r1, sl
 8002c6e:	ebb2 0801 	subs.w	r8, r2, r1
 8002c72:	4659      	mov	r1, fp
 8002c74:	eb63 0901 	sbc.w	r9, r3, r1
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8c:	4690      	mov	r8, r2
 8002c8e:	4699      	mov	r9, r3
 8002c90:	4623      	mov	r3, r4
 8002c92:	eb18 0303 	adds.w	r3, r8, r3
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	462b      	mov	r3, r5
 8002c9a:	eb49 0303 	adc.w	r3, r9, r3
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cac:	4629      	mov	r1, r5
 8002cae:	024b      	lsls	r3, r1, #9
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	024a      	lsls	r2, r1, #9
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cc6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002cc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ccc:	f7fd faa0 	bl	8000210 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cda:	e065      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x420>
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cfe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d02:	4642      	mov	r2, r8
 8002d04:	464b      	mov	r3, r9
 8002d06:	f04f 0000 	mov.w	r0, #0
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	0159      	lsls	r1, r3, #5
 8002d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d14:	0150      	lsls	r0, r2, #5
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	1a51      	subs	r1, r2, r1
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	4649      	mov	r1, r9
 8002d22:	eb63 0301 	sbc.w	r3, r3, r1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d34:	4659      	mov	r1, fp
 8002d36:	018b      	lsls	r3, r1, #6
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3e:	4651      	mov	r1, sl
 8002d40:	018a      	lsls	r2, r1, #6
 8002d42:	4651      	mov	r1, sl
 8002d44:	1a54      	subs	r4, r2, r1
 8002d46:	4659      	mov	r1, fp
 8002d48:	eb63 0501 	sbc.w	r5, r3, r1
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	00eb      	lsls	r3, r5, #3
 8002d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d5a:	00e2      	lsls	r2, r4, #3
 8002d5c:	4614      	mov	r4, r2
 8002d5e:	461d      	mov	r5, r3
 8002d60:	4643      	mov	r3, r8
 8002d62:	18e3      	adds	r3, r4, r3
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	464b      	mov	r3, r9
 8002d68:	eb45 0303 	adc.w	r3, r5, r3
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	028b      	lsls	r3, r1, #10
 8002d7e:	4621      	mov	r1, r4
 8002d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d84:	4621      	mov	r1, r4
 8002d86:	028a      	lsls	r2, r1, #10
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d90:	2200      	movs	r2, #0
 8002d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d94:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d9a:	f7fd fa39 	bl	8000210 <__aeabi_uldivmod>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4613      	mov	r3, r2
 8002da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002da8:	4b0d      	ldr	r3, [pc, #52]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0f1b      	lsrs	r3, r3, #28
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dc6:	e003      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002dca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	37b8      	adds	r7, #184	@ 0xb8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400

08002de8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e28d      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8083 	beq.w	8002f0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e08:	4b94      	ldr	r3, [pc, #592]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d019      	beq.n	8002e48 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e14:	4b91      	ldr	r3, [pc, #580]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e20:	4b8e      	ldr	r3, [pc, #568]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e2c:	d00c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d112      	bne.n	8002e60 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3a:	4b88      	ldr	r3, [pc, #544]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e46:	d10b      	bne.n	8002e60 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	4b84      	ldr	r3, [pc, #528]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d05b      	beq.n	8002f0c <HAL_RCC_OscConfig+0x124>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d157      	bne.n	8002f0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e25a      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x90>
 8002e6a:	4b7c      	ldr	r3, [pc, #496]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7b      	ldr	r2, [pc, #492]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e01d      	b.n	8002eb4 <HAL_RCC_OscConfig+0xcc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0xb4>
 8002e82:	4b76      	ldr	r3, [pc, #472]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a75      	ldr	r2, [pc, #468]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b73      	ldr	r3, [pc, #460]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a72      	ldr	r2, [pc, #456]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0xcc>
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a6b      	ldr	r2, [pc, #428]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fadc 	bl	8001478 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe fad8 	bl	8001478 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	@ 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e21f      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b61      	ldr	r3, [pc, #388]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xdc>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fac8 	bl	8001478 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe fac4 	bl	8001478 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	@ 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e20b      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	4b57      	ldr	r3, [pc, #348]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x104>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d06f      	beq.n	8002ffa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f1a:	4b50      	ldr	r3, [pc, #320]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d017      	beq.n	8002f56 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f26:	4b4d      	ldr	r3, [pc, #308]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f32:	4b4a      	ldr	r3, [pc, #296]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b47      	ldr	r3, [pc, #284]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b44      	ldr	r3, [pc, #272]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b41      	ldr	r3, [pc, #260]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x186>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1d3      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4937      	ldr	r1, [pc, #220]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e03a      	b.n	8002ffa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b34      	ldr	r3, [pc, #208]	@ (8003060 <HAL_RCC_OscConfig+0x278>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe fa71 	bl	8001478 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fa6d 	bl	8001478 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1b4      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	4b2b      	ldr	r3, [pc, #172]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b28      	ldr	r3, [pc, #160]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4925      	ldr	r1, [pc, #148]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <HAL_RCC_OscConfig+0x278>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fa50 	bl	8001478 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fa4c 	bl	8001478 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e193      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	4b1b      	ldr	r3, [pc, #108]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d036      	beq.n	8003074 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300e:	4b15      	ldr	r3, [pc, #84]	@ (8003064 <HAL_RCC_OscConfig+0x27c>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fa30 	bl	8001478 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe fa2c 	bl	8001478 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e173      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8003030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x234>
 800303a:	e01b      	b.n	8003074 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303c:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <HAL_RCC_OscConfig+0x27c>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003042:	f7fe fa19 	bl	8001478 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	e00e      	b.n	8003068 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304a:	f7fe fa15 	bl	8001478 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d907      	bls.n	8003068 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e15c      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
 800305c:	40023800 	.word	0x40023800
 8003060:	42470000 	.word	0x42470000
 8003064:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	4b8a      	ldr	r3, [pc, #552]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ea      	bne.n	800304a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8097 	beq.w	80031b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4b83      	ldr	r3, [pc, #524]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	4b7f      	ldr	r3, [pc, #508]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a7e      	ldr	r2, [pc, #504]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b79      	ldr	r3, [pc, #484]	@ (8003298 <HAL_RCC_OscConfig+0x4b0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4b76      	ldr	r3, [pc, #472]	@ (8003298 <HAL_RCC_OscConfig+0x4b0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a75      	ldr	r2, [pc, #468]	@ (8003298 <HAL_RCC_OscConfig+0x4b0>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe f9d5 	bl	8001478 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe f9d1 	bl	8001478 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e118      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003298 <HAL_RCC_OscConfig+0x4b0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x31e>
 80030f8:	4b66      	ldr	r3, [pc, #408]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fc:	4a65      	ldr	r2, [pc, #404]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	@ 0x70
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x358>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x340>
 800310e:	4b61      	ldr	r3, [pc, #388]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	4a60      	ldr	r2, [pc, #384]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6713      	str	r3, [r2, #112]	@ 0x70
 800311a:	4b5e      	ldr	r3, [pc, #376]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	4a5d      	ldr	r2, [pc, #372]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	@ 0x70
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x358>
 8003128:	4b5a      	ldr	r3, [pc, #360]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	4a59      	ldr	r2, [pc, #356]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	@ 0x70
 8003134:	4b57      	ldr	r3, [pc, #348]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003138:	4a56      	ldr	r2, [pc, #344]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe f996 	bl	8001478 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fe f992 	bl	8001478 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0d7      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	4b4b      	ldr	r3, [pc, #300]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ee      	beq.n	8003150 <HAL_RCC_OscConfig+0x368>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe f980 	bl	8001478 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe f97c 	bl	8001478 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0c1      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	4b40      	ldr	r3, [pc, #256]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ee      	bne.n	800317c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80031aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80ad 	beq.w	8003314 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ba:	4b36      	ldr	r3, [pc, #216]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d060      	beq.n	8003288 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d145      	bne.n	800325a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b33      	ldr	r3, [pc, #204]	@ (800329c <HAL_RCC_OscConfig+0x4b4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe f950 	bl	8001478 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe f94c 	bl	8001478 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e093      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003224:	071b      	lsls	r3, r3, #28
 8003226:	491b      	ldr	r1, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_OscConfig+0x4b4>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fe f921 	bl	8001478 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe f91d 	bl	8001478 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e064      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x452>
 8003258:	e05c      	b.n	8003314 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <HAL_RCC_OscConfig+0x4b4>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe f90a 	bl	8001478 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe f906 	bl	8001478 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e04d      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x480>
 8003286:	e045      	b.n	8003314 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e040      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003320 <HAL_RCC_OscConfig+0x538>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d030      	beq.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d129      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d122      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	4293      	cmp	r3, r2
 80032da:	d119      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d10f      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07b      	b.n	800342e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003346:	d009      	beq.n	800335c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
 800334e:	e005      	b.n	800335c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fdfa 	bl	8000f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e0:	ea42 0103 	orr.w	r1, r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 0104 	and.w	r1, r3, #4
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	f003 0210 	and.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e041      	b.n	80034cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d106      	bne.n	8003462 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fd fdef 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	4619      	mov	r1, r3
 8003474:	4610      	mov	r0, r2
 8003476:	f000 fb13 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d001      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e04e      	b.n	800358a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a23      	ldr	r2, [pc, #140]	@ (8003598 <HAL_TIM_Base_Start_IT+0xc4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d022      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003516:	d01d      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1f      	ldr	r2, [pc, #124]	@ (800359c <HAL_TIM_Base_Start_IT+0xc8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d018      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1e      	ldr	r2, [pc, #120]	@ (80035a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1c      	ldr	r2, [pc, #112]	@ (80035a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00e      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1b      	ldr	r2, [pc, #108]	@ (80035a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a19      	ldr	r2, [pc, #100]	@ (80035ac <HAL_TIM_Base_Start_IT+0xd8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a18      	ldr	r2, [pc, #96]	@ (80035b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d111      	bne.n	8003578 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b06      	cmp	r3, #6
 8003564:	d010      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003576:	e007      	b.n	8003588 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40010000 	.word	0x40010000
 800359c:	40000400 	.word	0x40000400
 80035a0:	40000800 	.word	0x40000800
 80035a4:	40000c00 	.word	0x40000c00
 80035a8:	40010400 	.word	0x40010400
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40001800 	.word	0x40001800

080035b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e041      	b.n	800364a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f839 	bl	8003652 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f000 fa54 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01b      	beq.n	80036ca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0202 	mvn.w	r2, #2
 800369a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f9d7 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 80036b6:	e005      	b.n	80036c4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f9c9 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9da 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01b      	beq.n	8003716 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f06f 0204 	mvn.w	r2, #4
 80036e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f9b1 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003702:	e005      	b.n	8003710 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f9a3 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f9b4 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d020      	beq.n	8003762 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01b      	beq.n	8003762 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f06f 0208 	mvn.w	r2, #8
 8003732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2204      	movs	r2, #4
 8003738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f98b 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 800374e:	e005      	b.n	800375c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f97d 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f98e 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01b      	beq.n	80037ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0210 	mvn.w	r2, #16
 800377e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2208      	movs	r2, #8
 8003784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f965 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 800379a:	e005      	b.n	80037a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f957 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f968 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00c      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f06f 0201 	mvn.w	r2, #1
 80037ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fd fa95 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fd41 	bl	8004278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00c      	beq.n	800381a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f939 	bl	8003a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00c      	beq.n	800383e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0220 	mvn.w	r2, #32
 8003836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fd13 	bl	8004264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003862:	2302      	movs	r3, #2
 8003864:	e0ae      	b.n	80039c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b0c      	cmp	r3, #12
 8003872:	f200 809f 	bhi.w	80039b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003876:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	080038b1 	.word	0x080038b1
 8003880:	080039b5 	.word	0x080039b5
 8003884:	080039b5 	.word	0x080039b5
 8003888:	080039b5 	.word	0x080039b5
 800388c:	080038f1 	.word	0x080038f1
 8003890:	080039b5 	.word	0x080039b5
 8003894:	080039b5 	.word	0x080039b5
 8003898:	080039b5 	.word	0x080039b5
 800389c:	08003933 	.word	0x08003933
 80038a0:	080039b5 	.word	0x080039b5
 80038a4:	080039b5 	.word	0x080039b5
 80038a8:	080039b5 	.word	0x080039b5
 80038ac:	08003973 	.word	0x08003973
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f998 	bl	8003bec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6999      	ldr	r1, [r3, #24]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	619a      	str	r2, [r3, #24]
      break;
 80038ee:	e064      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f9e8 	bl	8003ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800390a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800391a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6999      	ldr	r1, [r3, #24]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	021a      	lsls	r2, r3, #8
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	619a      	str	r2, [r3, #24]
      break;
 8003930:	e043      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fa3d 	bl	8003db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0208 	orr.w	r2, r2, #8
 800394c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0204 	bic.w	r2, r2, #4
 800395c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69d9      	ldr	r1, [r3, #28]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
      break;
 8003970:	e023      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fa91 	bl	8003ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800398c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800399c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69d9      	ldr	r1, [r3, #28]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	021a      	lsls	r2, r3, #8
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	61da      	str	r2, [r3, #28]
      break;
 80039b2:	e002      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
      break;
 80039b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e031      	b.n	8003a48 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 faa8 	bl	8003f4c <TIM_SlaveTimer_SetConfig>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e018      	b.n	8003a48 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a24:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a34:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a43      	ldr	r2, [pc, #268]	@ (8003bc0 <TIM_Base_SetConfig+0x120>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a40      	ldr	r2, [pc, #256]	@ (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a3f      	ldr	r2, [pc, #252]	@ (8003bc8 <TIM_Base_SetConfig+0x128>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8003bcc <TIM_Base_SetConfig+0x12c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a3d      	ldr	r2, [pc, #244]	@ (8003bd0 <TIM_Base_SetConfig+0x130>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a32      	ldr	r2, [pc, #200]	@ (8003bc0 <TIM_Base_SetConfig+0x120>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02b      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b00:	d027      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2f      	ldr	r2, [pc, #188]	@ (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d023      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc8 <TIM_Base_SetConfig+0x128>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01f      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2d      	ldr	r2, [pc, #180]	@ (8003bcc <TIM_Base_SetConfig+0x12c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01b      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd0 <TIM_Base_SetConfig+0x130>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d017      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd4 <TIM_Base_SetConfig+0x134>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd8 <TIM_Base_SetConfig+0x138>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00f      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a29      	ldr	r2, [pc, #164]	@ (8003bdc <TIM_Base_SetConfig+0x13c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a28      	ldr	r2, [pc, #160]	@ (8003be0 <TIM_Base_SetConfig+0x140>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a27      	ldr	r2, [pc, #156]	@ (8003be4 <TIM_Base_SetConfig+0x144>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a26      	ldr	r2, [pc, #152]	@ (8003be8 <TIM_Base_SetConfig+0x148>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d108      	bne.n	8003b64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a0e      	ldr	r2, [pc, #56]	@ (8003bc0 <TIM_Base_SetConfig+0x120>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_Base_SetConfig+0xf2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a10      	ldr	r2, [pc, #64]	@ (8003bd0 <TIM_Base_SetConfig+0x130>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d103      	bne.n	8003b9a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f043 0204 	orr.w	r2, r3, #4
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	40000c00 	.word	0x40000c00
 8003bd0:	40010400 	.word	0x40010400
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800
 8003be0:	40001800 	.word	0x40001800
 8003be4:	40001c00 	.word	0x40001c00
 8003be8:	40002000 	.word	0x40002000

08003bec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 0201 	bic.w	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0303 	bic.w	r3, r3, #3
 8003c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f023 0302 	bic.w	r3, r3, #2
 8003c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a20      	ldr	r2, [pc, #128]	@ (8003cc4 <TIM_OC1_SetConfig+0xd8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_OC1_SetConfig+0x64>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc8 <TIM_OC1_SetConfig+0xdc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10c      	bne.n	8003c6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0308 	bic.w	r3, r3, #8
 8003c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f023 0304 	bic.w	r3, r3, #4
 8003c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a15      	ldr	r2, [pc, #84]	@ (8003cc4 <TIM_OC1_SetConfig+0xd8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_OC1_SetConfig+0x8e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a14      	ldr	r2, [pc, #80]	@ (8003cc8 <TIM_OC1_SetConfig+0xdc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d111      	bne.n	8003c9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40010400 	.word	0x40010400

08003ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 0210 	bic.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0320 	bic.w	r3, r3, #32
 8003d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a22      	ldr	r2, [pc, #136]	@ (8003db0 <TIM_OC2_SetConfig+0xe4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_OC2_SetConfig+0x68>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a21      	ldr	r2, [pc, #132]	@ (8003db4 <TIM_OC2_SetConfig+0xe8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10d      	bne.n	8003d50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a17      	ldr	r2, [pc, #92]	@ (8003db0 <TIM_OC2_SetConfig+0xe4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_OC2_SetConfig+0x94>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a16      	ldr	r2, [pc, #88]	@ (8003db4 <TIM_OC2_SetConfig+0xe8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d113      	bne.n	8003d88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40010400 	.word	0x40010400

08003db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a21      	ldr	r2, [pc, #132]	@ (8003e98 <TIM_OC3_SetConfig+0xe0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_OC3_SetConfig+0x66>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a20      	ldr	r2, [pc, #128]	@ (8003e9c <TIM_OC3_SetConfig+0xe4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d10d      	bne.n	8003e3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a16      	ldr	r2, [pc, #88]	@ (8003e98 <TIM_OC3_SetConfig+0xe0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_OC3_SetConfig+0x92>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a15      	ldr	r2, [pc, #84]	@ (8003e9c <TIM_OC3_SetConfig+0xe4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d113      	bne.n	8003e72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	621a      	str	r2, [r3, #32]
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	031b      	lsls	r3, r3, #12
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a12      	ldr	r2, [pc, #72]	@ (8003f44 <TIM_OC4_SetConfig+0xa4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_OC4_SetConfig+0x68>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a11      	ldr	r2, [pc, #68]	@ (8003f48 <TIM_OC4_SetConfig+0xa8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d109      	bne.n	8003f1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40010400 	.word	0x40010400

08003f4c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f68:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b70      	cmp	r3, #112	@ 0x70
 8003f94:	d01a      	beq.n	8003fcc <TIM_SlaveTimer_SetConfig+0x80>
 8003f96:	2b70      	cmp	r3, #112	@ 0x70
 8003f98:	d860      	bhi.n	800405c <TIM_SlaveTimer_SetConfig+0x110>
 8003f9a:	2b60      	cmp	r3, #96	@ 0x60
 8003f9c:	d054      	beq.n	8004048 <TIM_SlaveTimer_SetConfig+0xfc>
 8003f9e:	2b60      	cmp	r3, #96	@ 0x60
 8003fa0:	d85c      	bhi.n	800405c <TIM_SlaveTimer_SetConfig+0x110>
 8003fa2:	2b50      	cmp	r3, #80	@ 0x50
 8003fa4:	d046      	beq.n	8004034 <TIM_SlaveTimer_SetConfig+0xe8>
 8003fa6:	2b50      	cmp	r3, #80	@ 0x50
 8003fa8:	d858      	bhi.n	800405c <TIM_SlaveTimer_SetConfig+0x110>
 8003faa:	2b40      	cmp	r3, #64	@ 0x40
 8003fac:	d019      	beq.n	8003fe2 <TIM_SlaveTimer_SetConfig+0x96>
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d854      	bhi.n	800405c <TIM_SlaveTimer_SetConfig+0x110>
 8003fb2:	2b30      	cmp	r3, #48	@ 0x30
 8003fb4:	d055      	beq.n	8004062 <TIM_SlaveTimer_SetConfig+0x116>
 8003fb6:	2b30      	cmp	r3, #48	@ 0x30
 8003fb8:	d850      	bhi.n	800405c <TIM_SlaveTimer_SetConfig+0x110>
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d051      	beq.n	8004062 <TIM_SlaveTimer_SetConfig+0x116>
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d84c      	bhi.n	800405c <TIM_SlaveTimer_SetConfig+0x110>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04d      	beq.n	8004062 <TIM_SlaveTimer_SetConfig+0x116>
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d04b      	beq.n	8004062 <TIM_SlaveTimer_SetConfig+0x116>
 8003fca:	e047      	b.n	800405c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003fdc:	f000 f8a6 	bl	800412c <TIM_ETR_SetConfig>
      break;
 8003fe0:	e040      	b.n	8004064 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d101      	bne.n	8003fee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e03b      	b.n	8004066 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004014:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
      break;
 8004032:	e017      	b.n	8004064 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004040:	461a      	mov	r2, r3
 8004042:	f000 f814 	bl	800406e <TIM_TI1_ConfigInputStage>
      break;
 8004046:	e00d      	b.n	8004064 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004054:	461a      	mov	r2, r3
 8004056:	f000 f839 	bl	80040cc <TIM_TI2_ConfigInputStage>
      break;
 800405a:	e003      	b.n	8004064 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	e000      	b.n	8004064 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004062:	bf00      	nop
  }

  return status;
 8004064:	7dfb      	ldrb	r3, [r7, #23]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406e:	b480      	push	{r7}
 8004070:	b087      	sub	sp, #28
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f023 0201 	bic.w	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004098:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 030a 	bic.w	r3, r3, #10
 80040aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0210 	bic.w	r2, r3, #16
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	031b      	lsls	r3, r3, #12
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004108:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	621a      	str	r2, [r3, #32]
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	021a      	lsls	r2, r3, #8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	431a      	orrs	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004180:	2302      	movs	r3, #2
 8004182:	e05a      	b.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a21      	ldr	r2, [pc, #132]	@ (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d022      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d0:	d01d      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1d      	ldr	r2, [pc, #116]	@ (800424c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d018      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a17      	ldr	r2, [pc, #92]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10c      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	4313      	orrs	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40010400 	.word	0x40010400
 800425c:	40014000 	.word	0x40014000
 8004260:	40001800 	.word	0x40001800

08004264 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e042      	b.n	8004324 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc ff20 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	@ 0x24
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f82b 	bl	800432c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004304:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004330:	b0c0      	sub	sp, #256	@ 0x100
 8004332:	af00      	add	r7, sp, #0
 8004334:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	68d9      	ldr	r1, [r3, #12]
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	ea40 0301 	orr.w	r3, r0, r1
 8004354:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	431a      	orrs	r2, r3
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004384:	f021 010c 	bic.w	r1, r1, #12
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004392:	430b      	orrs	r3, r1
 8004394:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a6:	6999      	ldr	r1, [r3, #24]
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	ea40 0301 	orr.w	r3, r0, r1
 80043b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b8f      	ldr	r3, [pc, #572]	@ (80045f8 <UART_SetConfig+0x2cc>)
 80043bc:	429a      	cmp	r2, r3
 80043be:	d005      	beq.n	80043cc <UART_SetConfig+0xa0>
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b8d      	ldr	r3, [pc, #564]	@ (80045fc <UART_SetConfig+0x2d0>)
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d104      	bne.n	80043d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043cc:	f7fe fa96 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80043d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043d4:	e003      	b.n	80043de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043d6:	f7fe fa7d 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80043da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e8:	f040 810c 	bne.w	8004604 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043fe:	4622      	mov	r2, r4
 8004400:	462b      	mov	r3, r5
 8004402:	1891      	adds	r1, r2, r2
 8004404:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004406:	415b      	adcs	r3, r3
 8004408:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800440a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800440e:	4621      	mov	r1, r4
 8004410:	eb12 0801 	adds.w	r8, r2, r1
 8004414:	4629      	mov	r1, r5
 8004416:	eb43 0901 	adc.w	r9, r3, r1
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800442a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800442e:	4690      	mov	r8, r2
 8004430:	4699      	mov	r9, r3
 8004432:	4623      	mov	r3, r4
 8004434:	eb18 0303 	adds.w	r3, r8, r3
 8004438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800443c:	462b      	mov	r3, r5
 800443e:	eb49 0303 	adc.w	r3, r9, r3
 8004442:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004452:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004456:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800445a:	460b      	mov	r3, r1
 800445c:	18db      	adds	r3, r3, r3
 800445e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004460:	4613      	mov	r3, r2
 8004462:	eb42 0303 	adc.w	r3, r2, r3
 8004466:	657b      	str	r3, [r7, #84]	@ 0x54
 8004468:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800446c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004470:	f7fb fece 	bl	8000210 <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4b61      	ldr	r3, [pc, #388]	@ (8004600 <UART_SetConfig+0x2d4>)
 800447a:	fba3 2302 	umull	r2, r3, r3, r2
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	011c      	lsls	r4, r3, #4
 8004482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004486:	2200      	movs	r2, #0
 8004488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800448c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004490:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004494:	4642      	mov	r2, r8
 8004496:	464b      	mov	r3, r9
 8004498:	1891      	adds	r1, r2, r2
 800449a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800449c:	415b      	adcs	r3, r3
 800449e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044a4:	4641      	mov	r1, r8
 80044a6:	eb12 0a01 	adds.w	sl, r2, r1
 80044aa:	4649      	mov	r1, r9
 80044ac:	eb43 0b01 	adc.w	fp, r3, r1
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044c4:	4692      	mov	sl, r2
 80044c6:	469b      	mov	fp, r3
 80044c8:	4643      	mov	r3, r8
 80044ca:	eb1a 0303 	adds.w	r3, sl, r3
 80044ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044d2:	464b      	mov	r3, r9
 80044d4:	eb4b 0303 	adc.w	r3, fp, r3
 80044d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044f0:	460b      	mov	r3, r1
 80044f2:	18db      	adds	r3, r3, r3
 80044f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044f6:	4613      	mov	r3, r2
 80044f8:	eb42 0303 	adc.w	r3, r2, r3
 80044fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004502:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004506:	f7fb fe83 	bl	8000210 <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4611      	mov	r1, r2
 8004510:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <UART_SetConfig+0x2d4>)
 8004512:	fba3 2301 	umull	r2, r3, r3, r1
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2264      	movs	r2, #100	@ 0x64
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	1acb      	subs	r3, r1, r3
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004526:	4b36      	ldr	r3, [pc, #216]	@ (8004600 <UART_SetConfig+0x2d4>)
 8004528:	fba3 2302 	umull	r2, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004534:	441c      	add	r4, r3
 8004536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800453a:	2200      	movs	r2, #0
 800453c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004540:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004544:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	1891      	adds	r1, r2, r2
 800454e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004550:	415b      	adcs	r3, r3
 8004552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004554:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004558:	4641      	mov	r1, r8
 800455a:	1851      	adds	r1, r2, r1
 800455c:	6339      	str	r1, [r7, #48]	@ 0x30
 800455e:	4649      	mov	r1, r9
 8004560:	414b      	adcs	r3, r1
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004570:	4659      	mov	r1, fp
 8004572:	00cb      	lsls	r3, r1, #3
 8004574:	4651      	mov	r1, sl
 8004576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800457a:	4651      	mov	r1, sl
 800457c:	00ca      	lsls	r2, r1, #3
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	4603      	mov	r3, r0
 8004584:	4642      	mov	r2, r8
 8004586:	189b      	adds	r3, r3, r2
 8004588:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800458c:	464b      	mov	r3, r9
 800458e:	460a      	mov	r2, r1
 8004590:	eb42 0303 	adc.w	r3, r2, r3
 8004594:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045ac:	460b      	mov	r3, r1
 80045ae:	18db      	adds	r3, r3, r3
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b2:	4613      	mov	r3, r2
 80045b4:	eb42 0303 	adc.w	r3, r2, r3
 80045b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045c2:	f7fb fe25 	bl	8000210 <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004600 <UART_SetConfig+0x2d4>)
 80045cc:	fba3 1302 	umull	r1, r3, r3, r2
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	2164      	movs	r1, #100	@ 0x64
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	3332      	adds	r3, #50	@ 0x32
 80045de:	4a08      	ldr	r2, [pc, #32]	@ (8004600 <UART_SetConfig+0x2d4>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	f003 0207 	and.w	r2, r3, #7
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4422      	add	r2, r4
 80045f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045f4:	e106      	b.n	8004804 <UART_SetConfig+0x4d8>
 80045f6:	bf00      	nop
 80045f8:	40011000 	.word	0x40011000
 80045fc:	40011400 	.word	0x40011400
 8004600:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004608:	2200      	movs	r2, #0
 800460a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800460e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004612:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004616:	4642      	mov	r2, r8
 8004618:	464b      	mov	r3, r9
 800461a:	1891      	adds	r1, r2, r2
 800461c:	6239      	str	r1, [r7, #32]
 800461e:	415b      	adcs	r3, r3
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
 8004622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004626:	4641      	mov	r1, r8
 8004628:	1854      	adds	r4, r2, r1
 800462a:	4649      	mov	r1, r9
 800462c:	eb43 0501 	adc.w	r5, r3, r1
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	00eb      	lsls	r3, r5, #3
 800463a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463e:	00e2      	lsls	r2, r4, #3
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	4643      	mov	r3, r8
 8004646:	18e3      	adds	r3, r4, r3
 8004648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800464c:	464b      	mov	r3, r9
 800464e:	eb45 0303 	adc.w	r3, r5, r3
 8004652:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004662:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004672:	4629      	mov	r1, r5
 8004674:	008b      	lsls	r3, r1, #2
 8004676:	4621      	mov	r1, r4
 8004678:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467c:	4621      	mov	r1, r4
 800467e:	008a      	lsls	r2, r1, #2
 8004680:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004684:	f7fb fdc4 	bl	8000210 <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4b60      	ldr	r3, [pc, #384]	@ (8004810 <UART_SetConfig+0x4e4>)
 800468e:	fba3 2302 	umull	r2, r3, r3, r2
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	011c      	lsls	r4, r3, #4
 8004696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	1891      	adds	r1, r2, r2
 80046ae:	61b9      	str	r1, [r7, #24]
 80046b0:	415b      	adcs	r3, r3
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b8:	4641      	mov	r1, r8
 80046ba:	1851      	adds	r1, r2, r1
 80046bc:	6139      	str	r1, [r7, #16]
 80046be:	4649      	mov	r1, r9
 80046c0:	414b      	adcs	r3, r1
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046d0:	4659      	mov	r1, fp
 80046d2:	00cb      	lsls	r3, r1, #3
 80046d4:	4651      	mov	r1, sl
 80046d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046da:	4651      	mov	r1, sl
 80046dc:	00ca      	lsls	r2, r1, #3
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	4642      	mov	r2, r8
 80046e6:	189b      	adds	r3, r3, r2
 80046e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046ec:	464b      	mov	r3, r9
 80046ee:	460a      	mov	r2, r1
 80046f0:	eb42 0303 	adc.w	r3, r2, r3
 80046f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004702:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004710:	4649      	mov	r1, r9
 8004712:	008b      	lsls	r3, r1, #2
 8004714:	4641      	mov	r1, r8
 8004716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800471a:	4641      	mov	r1, r8
 800471c:	008a      	lsls	r2, r1, #2
 800471e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004722:	f7fb fd75 	bl	8000210 <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4611      	mov	r1, r2
 800472c:	4b38      	ldr	r3, [pc, #224]	@ (8004810 <UART_SetConfig+0x4e4>)
 800472e:	fba3 2301 	umull	r2, r3, r3, r1
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	2264      	movs	r2, #100	@ 0x64
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	1acb      	subs	r3, r1, r3
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	3332      	adds	r3, #50	@ 0x32
 8004740:	4a33      	ldr	r2, [pc, #204]	@ (8004810 <UART_SetConfig+0x4e4>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800474c:	441c      	add	r4, r3
 800474e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004752:	2200      	movs	r2, #0
 8004754:	673b      	str	r3, [r7, #112]	@ 0x70
 8004756:	677a      	str	r2, [r7, #116]	@ 0x74
 8004758:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800475c:	4642      	mov	r2, r8
 800475e:	464b      	mov	r3, r9
 8004760:	1891      	adds	r1, r2, r2
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	415b      	adcs	r3, r3
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800476c:	4641      	mov	r1, r8
 800476e:	1851      	adds	r1, r2, r1
 8004770:	6039      	str	r1, [r7, #0]
 8004772:	4649      	mov	r1, r9
 8004774:	414b      	adcs	r3, r1
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004784:	4659      	mov	r1, fp
 8004786:	00cb      	lsls	r3, r1, #3
 8004788:	4651      	mov	r1, sl
 800478a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478e:	4651      	mov	r1, sl
 8004790:	00ca      	lsls	r2, r1, #3
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	4603      	mov	r3, r0
 8004798:	4642      	mov	r2, r8
 800479a:	189b      	adds	r3, r3, r2
 800479c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800479e:	464b      	mov	r3, r9
 80047a0:	460a      	mov	r2, r1
 80047a2:	eb42 0303 	adc.w	r3, r2, r3
 80047a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80047b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047c0:	4649      	mov	r1, r9
 80047c2:	008b      	lsls	r3, r1, #2
 80047c4:	4641      	mov	r1, r8
 80047c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ca:	4641      	mov	r1, r8
 80047cc:	008a      	lsls	r2, r1, #2
 80047ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047d2:	f7fb fd1d 	bl	8000210 <__aeabi_uldivmod>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <UART_SetConfig+0x4e4>)
 80047dc:	fba3 1302 	umull	r1, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	2164      	movs	r1, #100	@ 0x64
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	3332      	adds	r3, #50	@ 0x32
 80047ee:	4a08      	ldr	r2, [pc, #32]	@ (8004810 <UART_SetConfig+0x4e4>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f003 020f 	and.w	r2, r3, #15
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4422      	add	r2, r4
 8004802:	609a      	str	r2, [r3, #8]
}
 8004804:	bf00      	nop
 8004806:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800480a:	46bd      	mov	sp, r7
 800480c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004810:	51eb851f 	.word	0x51eb851f

08004814 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <SysTick_Handler+0x1c>)
 800481a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800481c:	f001 fc80 	bl	8006120 <xTaskGetSchedulerState>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d001      	beq.n	800482a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004826:	f002 fa77 	bl	8006d18 <xPortSysTickHandler>
  }
}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	e000e010 	.word	0xe000e010

08004834 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a07      	ldr	r2, [pc, #28]	@ (8004860 <vApplicationGetIdleTaskMemory+0x2c>)
 8004844:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4a06      	ldr	r2, [pc, #24]	@ (8004864 <vApplicationGetIdleTaskMemory+0x30>)
 800484a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2280      	movs	r2, #128	@ 0x80
 8004850:	601a      	str	r2, [r3, #0]
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000314 	.word	0x20000314
 8004864:	200003bc 	.word	0x200003bc

08004868 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a07      	ldr	r2, [pc, #28]	@ (8004894 <vApplicationGetTimerTaskMemory+0x2c>)
 8004878:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4a06      	ldr	r2, [pc, #24]	@ (8004898 <vApplicationGetTimerTaskMemory+0x30>)
 800487e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004886:	601a      	str	r2, [r3, #0]
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	200005bc 	.word	0x200005bc
 8004898:	20000664 	.word	0x20000664

0800489c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0208 	add.w	r2, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f04f 32ff 	mov.w	r2, #4294967295
 80048b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f103 0208 	add.w	r2, r3, #8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f103 0208 	add.w	r2, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048f6:	b480      	push	{r7}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d103      	bne.n	800495e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e00c      	b.n	8004978 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3308      	adds	r3, #8
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e002      	b.n	800496c <vListInsert+0x2e>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	429a      	cmp	r2, r3
 8004976:	d2f6      	bcs.n	8004966 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6892      	ldr	r2, [r2, #8]
 80049c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6852      	ldr	r2, [r2, #4]
 80049d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d103      	bne.n	80049e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	1e5a      	subs	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10b      	bne.n	8004a30 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a30:	f002 f8e2 	bl	8006bf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	441a      	add	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	3b01      	subs	r3, #1
 8004a62:	68f9      	ldr	r1, [r7, #12]
 8004a64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	441a      	add	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	22ff      	movs	r2, #255	@ 0xff
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	22ff      	movs	r2, #255	@ 0xff
 8004a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d114      	bne.n	8004ab0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01a      	beq.n	8004ac4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3310      	adds	r3, #16
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 f97e 	bl	8005d94 <xTaskRemoveFromEventList>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d012      	beq.n	8004ac4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <xQueueGenericReset+0xd0>)
 8004aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	e009      	b.n	8004ac4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3310      	adds	r3, #16
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fef1 	bl	800489c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3324      	adds	r3, #36	@ 0x24
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff feec 	bl	800489c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ac4:	f002 f8ca 	bl	8006c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ac8:	2301      	movs	r3, #1
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	e000ed04 	.word	0xe000ed04

08004ad8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08e      	sub	sp, #56	@ 0x38
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <xQueueGenericCreateStatic+0x56>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <xQueueGenericCreateStatic+0x5a>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <xQueueGenericCreateStatic+0x5c>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	623b      	str	r3, [r7, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <xQueueGenericCreateStatic+0x84>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <xQueueGenericCreateStatic+0x88>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <xQueueGenericCreateStatic+0x8a>
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	61fb      	str	r3, [r7, #28]
}
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	e7fd      	b.n	8004b7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b7e:	2350      	movs	r3, #80	@ 0x50
 8004b80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b50      	cmp	r3, #80	@ 0x50
 8004b86:	d00b      	beq.n	8004ba0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	61bb      	str	r3, [r7, #24]
}
 8004b9a:	bf00      	nop
 8004b9c:	bf00      	nop
 8004b9e:	e7fd      	b.n	8004b9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ba0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00d      	beq.n	8004bc8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bb4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f840 	bl	8004c48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3730      	adds	r7, #48	@ 0x30
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b08a      	sub	sp, #40	@ 0x28
 8004bd6:	af02      	add	r7, sp, #8
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <xQueueGenericCreate+0x2c>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	613b      	str	r3, [r7, #16]
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	e7fd      	b.n	8004bfa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	3350      	adds	r3, #80	@ 0x50
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f002 f915 	bl	8006e3c <pvPortMalloc>
 8004c12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d011      	beq.n	8004c3e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	3350      	adds	r3, #80	@ 0x50
 8004c22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c2c:	79fa      	ldrb	r2, [r7, #7]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	4613      	mov	r3, r2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f805 	bl	8004c48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3720      	adds	r7, #32
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e002      	b.n	8004c6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c76:	2101      	movs	r1, #1
 8004c78:	69b8      	ldr	r0, [r7, #24]
 8004c7a:	f7ff fec3 	bl	8004a04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08e      	sub	sp, #56	@ 0x38
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <xQueueGenericSend+0x34>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <xQueueGenericSend+0x42>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <xQueueGenericSend+0x46>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericSend+0x48>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <xQueueGenericSend+0x64>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d103      	bne.n	8004d02 <xQueueGenericSend+0x72>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <xQueueGenericSend+0x76>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xQueueGenericSend+0x78>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <xQueueGenericSend+0x94>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	623b      	str	r3, [r7, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d24:	f001 f9fc 	bl	8006120 <xTaskGetSchedulerState>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <xQueueGenericSend+0xa4>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <xQueueGenericSend+0xa8>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <xQueueGenericSend+0xaa>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <xQueueGenericSend+0xc6>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	61fb      	str	r3, [r7, #28]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d56:	f001 ff4f 	bl	8006bf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <xQueueGenericSend+0xdc>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d129      	bne.n	8004dc0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d72:	f000 fa0f 	bl	8005194 <prvCopyDataToQueue>
 8004d76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d010      	beq.n	8004da2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	3324      	adds	r3, #36	@ 0x24
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f805 	bl	8005d94 <xTaskRemoveFromEventList>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d013      	beq.n	8004db8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d90:	4b3f      	ldr	r3, [pc, #252]	@ (8004e90 <xQueueGenericSend+0x200>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	e00a      	b.n	8004db8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004da8:	4b39      	ldr	r3, [pc, #228]	@ (8004e90 <xQueueGenericSend+0x200>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004db8:	f001 ff50 	bl	8006c5c <vPortExitCritical>
				return pdPASS;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e063      	b.n	8004e88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dc6:	f001 ff49 	bl	8006c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e05c      	b.n	8004e88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f83f 	bl	8005e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004de2:	f001 ff3b 	bl	8006c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004de6:	f000 fda7 	bl	8005938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dea:	f001 ff05 	bl	8006bf8 <vPortEnterCritical>
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004df4:	b25b      	sxtb	r3, r3
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d103      	bne.n	8004e04 <xQueueGenericSend+0x174>
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0x18a>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e1a:	f001 ff1f 	bl	8006c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e1e:	1d3a      	adds	r2, r7, #4
 8004e20:	f107 0314 	add.w	r3, r7, #20
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 f82e 	bl	8005e88 <xTaskCheckForTimeOut>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d124      	bne.n	8004e7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e34:	f000 faa6 	bl	8005384 <prvIsQueueFull>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	3310      	adds	r3, #16
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 ff52 	bl	8005cf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e4e:	f000 fa31 	bl	80052b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e52:	f000 fd7f 	bl	8005954 <xTaskResumeAll>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f47f af7c 	bne.w	8004d56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e90 <xQueueGenericSend+0x200>)
 8004e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	e772      	b.n	8004d56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e72:	f000 fa1f 	bl	80052b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e76:	f000 fd6d 	bl	8005954 <xTaskResumeAll>
 8004e7a:	e76c      	b.n	8004d56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e7e:	f000 fa19 	bl	80052b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e82:	f000 fd67 	bl	8005954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3738      	adds	r7, #56	@ 0x38
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b090      	sub	sp, #64	@ 0x40
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <xQueueGenericSendFromISR+0x3e>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <xQueueGenericSendFromISR+0x42>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <xQueueGenericSendFromISR+0x44>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d103      	bne.n	8004f02 <xQueueGenericSendFromISR+0x6e>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <xQueueGenericSendFromISR+0x72>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueGenericSendFromISR+0x74>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	623b      	str	r3, [r7, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f24:	f001 ff48 	bl	8006db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f28:	f3ef 8211 	mrs	r2, BASEPRI
 8004f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	61fa      	str	r2, [r7, #28]
 8004f3e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <xQueueGenericSendFromISR+0xc2>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d12f      	bne.n	8004fb6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f6c:	f000 f912 	bl	8005194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d112      	bne.n	8004fa0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	3324      	adds	r3, #36	@ 0x24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 ff04 	bl	8005d94 <xTaskRemoveFromEventList>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00e      	beq.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e007      	b.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	b25a      	sxtb	r2, r3
 8004faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004fb4:	e001      	b.n	8004fba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fbc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3740      	adds	r7, #64	@ 0x40
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	@ 0x30
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10b      	bne.n	8005002 <xQueueReceive+0x32>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	623b      	str	r3, [r7, #32]
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	e7fd      	b.n	8004ffe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <xQueueReceive+0x40>
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <xQueueReceive+0x44>
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <xQueueReceive+0x46>
 8005014:	2300      	movs	r3, #0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10b      	bne.n	8005032 <xQueueReceive+0x62>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	61fb      	str	r3, [r7, #28]
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	e7fd      	b.n	800502e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005032:	f001 f875 	bl	8006120 <xTaskGetSchedulerState>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <xQueueReceive+0x72>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <xQueueReceive+0x76>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <xQueueReceive+0x78>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <xQueueReceive+0x94>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	61bb      	str	r3, [r7, #24]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005064:	f001 fdc8 	bl	8006bf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01f      	beq.n	80050b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005078:	f000 f8f6 	bl	8005268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00f      	beq.n	80050ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	3310      	adds	r3, #16
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fe7f 	bl	8005d94 <xTaskRemoveFromEventList>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800509c:	4b3c      	ldr	r3, [pc, #240]	@ (8005190 <xQueueReceive+0x1c0>)
 800509e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ac:	f001 fdd6 	bl	8006c5c <vPortExitCritical>
				return pdPASS;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e069      	b.n	8005188 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050ba:	f001 fdcf 	bl	8006c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050be:	2300      	movs	r3, #0
 80050c0:	e062      	b.n	8005188 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fec5 	bl	8005e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d6:	f001 fdc1 	bl	8006c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050da:	f000 fc2d 	bl	8005938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050de:	f001 fd8b 	bl	8006bf8 <vPortEnterCritical>
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d103      	bne.n	80050f8 <xQueueReceive+0x128>
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050fe:	b25b      	sxtb	r3, r3
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d103      	bne.n	800510e <xQueueReceive+0x13e>
 8005106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800510e:	f001 fda5 	bl	8006c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005112:	1d3a      	adds	r2, r7, #4
 8005114:	f107 0310 	add.w	r3, r7, #16
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f000 feb4 	bl	8005e88 <xTaskCheckForTimeOut>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d123      	bne.n	800516e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005128:	f000 f916 	bl	8005358 <prvIsQueueEmpty>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d017      	beq.n	8005162 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	3324      	adds	r3, #36	@ 0x24
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fdd8 	bl	8005cf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005142:	f000 f8b7 	bl	80052b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005146:	f000 fc05 	bl	8005954 <xTaskResumeAll>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d189      	bne.n	8005064 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005150:	4b0f      	ldr	r3, [pc, #60]	@ (8005190 <xQueueReceive+0x1c0>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	e780      	b.n	8005064 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005164:	f000 f8a6 	bl	80052b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005168:	f000 fbf4 	bl	8005954 <xTaskResumeAll>
 800516c:	e77a      	b.n	8005064 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800516e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005170:	f000 f8a0 	bl	80052b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005174:	f000 fbee 	bl	8005954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005178:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800517a:	f000 f8ed 	bl	8005358 <prvIsQueueEmpty>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	f43f af6f 	beq.w	8005064 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005186:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005188:	4618      	mov	r0, r3
 800518a:	3730      	adds	r7, #48	@ 0x30
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10d      	bne.n	80051ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d14d      	bne.n	8005256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 ffcc 	bl	800615c <xTaskPriorityDisinherit>
 80051c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	609a      	str	r2, [r3, #8]
 80051cc:	e043      	b.n	8005256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d119      	bne.n	8005208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6858      	ldr	r0, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	461a      	mov	r2, r3
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	f002 f8a6 	bl	8007330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d32b      	bcc.n	8005256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	e026      	b.n	8005256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68d8      	ldr	r0, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	461a      	mov	r2, r3
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	f002 f88c 	bl	8007330 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005220:	425b      	negs	r3, r3
 8005222:	441a      	add	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d207      	bcs.n	8005244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	425b      	negs	r3, r3
 800523e:	441a      	add	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d105      	bne.n	8005256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	3b01      	subs	r3, #1
 8005254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800525e:	697b      	ldr	r3, [r7, #20]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d018      	beq.n	80052ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	441a      	add	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d303      	bcc.n	800529c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68d9      	ldr	r1, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	461a      	mov	r2, r3
 80052a6:	6838      	ldr	r0, [r7, #0]
 80052a8:	f002 f842 	bl	8007330 <memcpy>
	}
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052bc:	f001 fc9c 	bl	8006bf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c8:	e011      	b.n	80052ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d012      	beq.n	80052f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3324      	adds	r3, #36	@ 0x24
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fd5c 	bl	8005d94 <xTaskRemoveFromEventList>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052e2:	f000 fe35 	bl	8005f50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dce9      	bgt.n	80052ca <prvUnlockQueue+0x16>
 80052f6:	e000      	b.n	80052fa <prvUnlockQueue+0x46>
					break;
 80052f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	22ff      	movs	r2, #255	@ 0xff
 80052fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005302:	f001 fcab 	bl	8006c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005306:	f001 fc77 	bl	8006bf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005312:	e011      	b.n	8005338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d012      	beq.n	8005342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3310      	adds	r3, #16
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fd37 	bl	8005d94 <xTaskRemoveFromEventList>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800532c:	f000 fe10 	bl	8005f50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	3b01      	subs	r3, #1
 8005334:	b2db      	uxtb	r3, r3
 8005336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800533c:	2b00      	cmp	r3, #0
 800533e:	dce9      	bgt.n	8005314 <prvUnlockQueue+0x60>
 8005340:	e000      	b.n	8005344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	22ff      	movs	r2, #255	@ 0xff
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800534c:	f001 fc86 	bl	8006c5c <vPortExitCritical>
}
 8005350:	bf00      	nop
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005360:	f001 fc4a 	bl	8006bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e001      	b.n	8005376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005376:	f001 fc71 	bl	8006c5c <vPortExitCritical>

	return xReturn;
 800537a:	68fb      	ldr	r3, [r7, #12]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800538c:	f001 fc34 	bl	8006bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	429a      	cmp	r2, r3
 800539a:	d102      	bne.n	80053a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800539c:	2301      	movs	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e001      	b.n	80053a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053a6:	f001 fc59 	bl	8006c5c <vPortExitCritical>

	return xReturn;
 80053aa:	68fb      	ldr	r3, [r7, #12]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e014      	b.n	80053ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005404 <vQueueAddToRegistry+0x50>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053d0:	490c      	ldr	r1, [pc, #48]	@ (8005404 <vQueueAddToRegistry+0x50>)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053da:	4a0a      	ldr	r2, [pc, #40]	@ (8005404 <vQueueAddToRegistry+0x50>)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053e6:	e006      	b.n	80053f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b07      	cmp	r3, #7
 80053f2:	d9e7      	bls.n	80053c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000a64 	.word	0x20000a64

08005408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005418:	f001 fbee 	bl	8006bf8 <vPortEnterCritical>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005422:	b25b      	sxtb	r3, r3
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d103      	bne.n	8005432 <vQueueWaitForMessageRestricted+0x2a>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005438:	b25b      	sxtb	r3, r3
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d103      	bne.n	8005448 <vQueueWaitForMessageRestricted+0x40>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005448:	f001 fc08 	bl	8006c5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	3324      	adds	r3, #36	@ 0x24
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fc6d 	bl	8005d3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005462:	6978      	ldr	r0, [r7, #20]
 8005464:	f7ff ff26 	bl	80052b4 <prvUnlockQueue>
	}
 8005468:	bf00      	nop
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08e      	sub	sp, #56	@ 0x38
 8005474:	af04      	add	r7, sp, #16
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800547e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10b      	bne.n	800549c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	623b      	str	r3, [r7, #32]
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	e7fd      	b.n	8005498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10b      	bne.n	80054ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	61fb      	str	r3, [r7, #28]
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
 80054b8:	e7fd      	b.n	80054b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054ba:	23a8      	movs	r3, #168	@ 0xa8
 80054bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80054c2:	d00b      	beq.n	80054dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	61bb      	str	r3, [r7, #24]
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	e7fd      	b.n	80054d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01e      	beq.n	8005522 <xTaskCreateStatic+0xb2>
 80054e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01b      	beq.n	8005522 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054fc:	2300      	movs	r3, #0
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	9302      	str	r3, [sp, #8]
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f851 	bl	80055bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800551a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800551c:	f000 f8f6 	bl	800570c <prvAddNewTaskToReadyList>
 8005520:	e001      	b.n	8005526 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005526:	697b      	ldr	r3, [r7, #20]
	}
 8005528:	4618      	mov	r0, r3
 800552a:	3728      	adds	r7, #40	@ 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08c      	sub	sp, #48	@ 0x30
 8005534:	af04      	add	r7, sp, #16
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4618      	mov	r0, r3
 8005546:	f001 fc79 	bl	8006e3c <pvPortMalloc>
 800554a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00e      	beq.n	8005570 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005552:	20a8      	movs	r0, #168	@ 0xa8
 8005554:	f001 fc72 	bl	8006e3c <pvPortMalloc>
 8005558:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	631a      	str	r2, [r3, #48]	@ 0x30
 8005566:	e005      	b.n	8005574 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005568:	6978      	ldr	r0, [r7, #20]
 800556a:	f001 fd35 	bl	8006fd8 <vPortFree>
 800556e:	e001      	b.n	8005574 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d017      	beq.n	80055aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	2300      	movs	r3, #0
 8005586:	9303      	str	r3, [sp, #12]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	9302      	str	r3, [sp, #8]
 800558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f80f 	bl	80055bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800559e:	69f8      	ldr	r0, [r7, #28]
 80055a0:	f000 f8b4 	bl	800570c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055a4:	2301      	movs	r3, #1
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	e002      	b.n	80055b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295
 80055ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055b0:	69bb      	ldr	r3, [r7, #24]
	}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	461a      	mov	r2, r3
 80055d4:	21a5      	movs	r1, #165	@ 0xa5
 80055d6:	f001 fe1f 	bl	8007218 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055e4:	3b01      	subs	r3, #1
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f023 0307 	bic.w	r3, r3, #7
 80055f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	617b      	str	r3, [r7, #20]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01f      	beq.n	800565c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800561c:	2300      	movs	r3, #0
 800561e:	61fb      	str	r3, [r7, #28]
 8005620:	e012      	b.n	8005648 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	7819      	ldrb	r1, [r3, #0]
 800562a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	3334      	adds	r3, #52	@ 0x34
 8005632:	460a      	mov	r2, r1
 8005634:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d006      	beq.n	8005650 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3301      	adds	r3, #1
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d9e9      	bls.n	8005622 <prvInitialiseNewTask+0x66>
 800564e:	e000      	b.n	8005652 <prvInitialiseNewTask+0x96>
			{
				break;
 8005650:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800565a:	e003      	b.n	8005664 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	2b37      	cmp	r3, #55	@ 0x37
 8005668:	d901      	bls.n	800566e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800566a:	2337      	movs	r3, #55	@ 0x37
 800566c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005672:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005678:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	2200      	movs	r2, #0
 800567e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	3304      	adds	r3, #4
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff f929 	bl	80048dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800568a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568c:	3318      	adds	r3, #24
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff f924 	bl	80048dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005698:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	3354      	adds	r3, #84	@ 0x54
 80056be:	224c      	movs	r2, #76	@ 0x4c
 80056c0:	2100      	movs	r1, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fda8 	bl	8007218 <memset>
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005700 <prvInitialiseNewTask+0x144>)
 80056cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005704 <prvInitialiseNewTask+0x148>)
 80056d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005708 <prvInitialiseNewTask+0x14c>)
 80056d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	68f9      	ldr	r1, [r7, #12]
 80056de:	69b8      	ldr	r0, [r7, #24]
 80056e0:	f001 f95a 	bl	8006998 <pxPortInitialiseStack>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056f6:	bf00      	nop
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20004cf8 	.word	0x20004cf8
 8005704:	20004d60 	.word	0x20004d60
 8005708:	20004dc8 	.word	0x20004dc8

0800570c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005714:	f001 fa70 	bl	8006bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005718:	4b2d      	ldr	r3, [pc, #180]	@ (80057d0 <prvAddNewTaskToReadyList+0xc4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	4a2c      	ldr	r2, [pc, #176]	@ (80057d0 <prvAddNewTaskToReadyList+0xc4>)
 8005720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005722:	4b2c      	ldr	r3, [pc, #176]	@ (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800572a:	4a2a      	ldr	r2, [pc, #168]	@ (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005730:	4b27      	ldr	r3, [pc, #156]	@ (80057d0 <prvAddNewTaskToReadyList+0xc4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d110      	bne.n	800575a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005738:	f000 fc2e 	bl	8005f98 <prvInitialiseTaskLists>
 800573c:	e00d      	b.n	800575a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800573e:	4b26      	ldr	r3, [pc, #152]	@ (80057d8 <prvAddNewTaskToReadyList+0xcc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005746:	4b23      	ldr	r3, [pc, #140]	@ (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	429a      	cmp	r2, r3
 8005752:	d802      	bhi.n	800575a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005754:	4a1f      	ldr	r2, [pc, #124]	@ (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800575a:	4b20      	ldr	r3, [pc, #128]	@ (80057dc <prvAddNewTaskToReadyList+0xd0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3301      	adds	r3, #1
 8005760:	4a1e      	ldr	r2, [pc, #120]	@ (80057dc <prvAddNewTaskToReadyList+0xd0>)
 8005762:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005764:	4b1d      	ldr	r3, [pc, #116]	@ (80057dc <prvAddNewTaskToReadyList+0xd0>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005770:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <prvAddNewTaskToReadyList+0xd4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d903      	bls.n	8005780 <prvAddNewTaskToReadyList+0x74>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	4a18      	ldr	r2, [pc, #96]	@ (80057e0 <prvAddNewTaskToReadyList+0xd4>)
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4a15      	ldr	r2, [pc, #84]	@ (80057e4 <prvAddNewTaskToReadyList+0xd8>)
 800578e:	441a      	add	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f7ff f8ad 	bl	80048f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800579c:	f001 fa5e 	bl	8006c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057a0:	4b0d      	ldr	r3, [pc, #52]	@ (80057d8 <prvAddNewTaskToReadyList+0xcc>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00e      	beq.n	80057c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057a8:	4b0a      	ldr	r3, [pc, #40]	@ (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d207      	bcs.n	80057c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057b6:	4b0c      	ldr	r3, [pc, #48]	@ (80057e8 <prvAddNewTaskToReadyList+0xdc>)
 80057b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000f78 	.word	0x20000f78
 80057d4:	20000aa4 	.word	0x20000aa4
 80057d8:	20000f84 	.word	0x20000f84
 80057dc:	20000f94 	.word	0x20000f94
 80057e0:	20000f80 	.word	0x20000f80
 80057e4:	20000aa8 	.word	0x20000aa8
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d018      	beq.n	8005830 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057fe:	4b14      	ldr	r3, [pc, #80]	@ (8005850 <vTaskDelay+0x64>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <vTaskDelay+0x32>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	60bb      	str	r3, [r7, #8]
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800581e:	f000 f88b 	bl	8005938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005822:	2100      	movs	r1, #0
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fd09 	bl	800623c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800582a:	f000 f893 	bl	8005954 <xTaskResumeAll>
 800582e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005836:	4b07      	ldr	r3, [pc, #28]	@ (8005854 <vTaskDelay+0x68>)
 8005838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000fa0 	.word	0x20000fa0
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	@ 0x28
 800585c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005866:	463a      	mov	r2, r7
 8005868:	1d39      	adds	r1, r7, #4
 800586a:	f107 0308 	add.w	r3, r7, #8
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe ffe0 	bl	8004834 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	9202      	str	r2, [sp, #8]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	2300      	movs	r3, #0
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	2300      	movs	r3, #0
 8005884:	460a      	mov	r2, r1
 8005886:	4924      	ldr	r1, [pc, #144]	@ (8005918 <vTaskStartScheduler+0xc0>)
 8005888:	4824      	ldr	r0, [pc, #144]	@ (800591c <vTaskStartScheduler+0xc4>)
 800588a:	f7ff fdf1 	bl	8005470 <xTaskCreateStatic>
 800588e:	4603      	mov	r3, r0
 8005890:	4a23      	ldr	r2, [pc, #140]	@ (8005920 <vTaskStartScheduler+0xc8>)
 8005892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005894:	4b22      	ldr	r3, [pc, #136]	@ (8005920 <vTaskStartScheduler+0xc8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800589c:	2301      	movs	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	e001      	b.n	80058a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d102      	bne.n	80058b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058ac:	f000 fd1a 	bl	80062e4 <xTimerCreateTimerTask>
 80058b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d11b      	bne.n	80058f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	613b      	str	r3, [r7, #16]
}
 80058ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058cc:	4b15      	ldr	r3, [pc, #84]	@ (8005924 <vTaskStartScheduler+0xcc>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3354      	adds	r3, #84	@ 0x54
 80058d2:	4a15      	ldr	r2, [pc, #84]	@ (8005928 <vTaskStartScheduler+0xd0>)
 80058d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d6:	4b15      	ldr	r3, [pc, #84]	@ (800592c <vTaskStartScheduler+0xd4>)
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058de:	4b14      	ldr	r3, [pc, #80]	@ (8005930 <vTaskStartScheduler+0xd8>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058e4:	4b13      	ldr	r3, [pc, #76]	@ (8005934 <vTaskStartScheduler+0xdc>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058ea:	f001 f8e1 	bl	8006ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058ee:	e00f      	b.n	8005910 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d10b      	bne.n	8005910 <vTaskStartScheduler+0xb8>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	60fb      	str	r3, [r7, #12]
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	e7fd      	b.n	800590c <vTaskStartScheduler+0xb4>
}
 8005910:	bf00      	nop
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	0800741c 	.word	0x0800741c
 800591c:	08005f69 	.word	0x08005f69
 8005920:	20000f9c 	.word	0x20000f9c
 8005924:	20000aa4 	.word	0x20000aa4
 8005928:	20000010 	.word	0x20000010
 800592c:	20000f98 	.word	0x20000f98
 8005930:	20000f84 	.word	0x20000f84
 8005934:	20000f7c 	.word	0x20000f7c

08005938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800593c:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <vTaskSuspendAll+0x18>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	4a03      	ldr	r2, [pc, #12]	@ (8005950 <vTaskSuspendAll+0x18>)
 8005944:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	20000fa0 	.word	0x20000fa0

08005954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005962:	4b42      	ldr	r3, [pc, #264]	@ (8005a6c <xTaskResumeAll+0x118>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10b      	bne.n	8005982 <xTaskResumeAll+0x2e>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	603b      	str	r3, [r7, #0]
}
 800597c:	bf00      	nop
 800597e:	bf00      	nop
 8005980:	e7fd      	b.n	800597e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005982:	f001 f939 	bl	8006bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005986:	4b39      	ldr	r3, [pc, #228]	@ (8005a6c <xTaskResumeAll+0x118>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3b01      	subs	r3, #1
 800598c:	4a37      	ldr	r2, [pc, #220]	@ (8005a6c <xTaskResumeAll+0x118>)
 800598e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005990:	4b36      	ldr	r3, [pc, #216]	@ (8005a6c <xTaskResumeAll+0x118>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d162      	bne.n	8005a5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005998:	4b35      	ldr	r3, [pc, #212]	@ (8005a70 <xTaskResumeAll+0x11c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d05e      	beq.n	8005a5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059a0:	e02f      	b.n	8005a02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a2:	4b34      	ldr	r3, [pc, #208]	@ (8005a74 <xTaskResumeAll+0x120>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3318      	adds	r3, #24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe fffe 	bl	80049b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe fff9 	bl	80049b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005a78 <xTaskResumeAll+0x124>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d903      	bls.n	80059d2 <xTaskResumeAll+0x7e>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005a78 <xTaskResumeAll+0x124>)
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4a27      	ldr	r2, [pc, #156]	@ (8005a7c <xTaskResumeAll+0x128>)
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7fe ff84 	bl	80048f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f2:	4b23      	ldr	r3, [pc, #140]	@ (8005a80 <xTaskResumeAll+0x12c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80059fc:	4b21      	ldr	r3, [pc, #132]	@ (8005a84 <xTaskResumeAll+0x130>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a02:	4b1c      	ldr	r3, [pc, #112]	@ (8005a74 <xTaskResumeAll+0x120>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1cb      	bne.n	80059a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a10:	f000 fb66 	bl	80060e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a14:	4b1c      	ldr	r3, [pc, #112]	@ (8005a88 <xTaskResumeAll+0x134>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d010      	beq.n	8005a42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a20:	f000 f846 	bl	8005ab0 <xTaskIncrementTick>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005a2a:	4b16      	ldr	r3, [pc, #88]	@ (8005a84 <xTaskResumeAll+0x130>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f1      	bne.n	8005a20 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005a3c:	4b12      	ldr	r3, [pc, #72]	@ (8005a88 <xTaskResumeAll+0x134>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a42:	4b10      	ldr	r3, [pc, #64]	@ (8005a84 <xTaskResumeAll+0x130>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <xTaskResumeAll+0x138>)
 8005a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a5e:	f001 f8fd 	bl	8006c5c <vPortExitCritical>

	return xAlreadyYielded;
 8005a62:	68bb      	ldr	r3, [r7, #8]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000fa0 	.word	0x20000fa0
 8005a70:	20000f78 	.word	0x20000f78
 8005a74:	20000f38 	.word	0x20000f38
 8005a78:	20000f80 	.word	0x20000f80
 8005a7c:	20000aa8 	.word	0x20000aa8
 8005a80:	20000aa4 	.word	0x20000aa4
 8005a84:	20000f8c 	.word	0x20000f8c
 8005a88:	20000f88 	.word	0x20000f88
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a96:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <xTaskGetTickCount+0x1c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a9c:	687b      	ldr	r3, [r7, #4]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	20000f7c 	.word	0x20000f7c

08005ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aba:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf8 <xTaskIncrementTick+0x148>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 8090 	bne.w	8005be4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8005bfc <xTaskIncrementTick+0x14c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005acc:	4a4b      	ldr	r2, [pc, #300]	@ (8005bfc <xTaskIncrementTick+0x14c>)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d121      	bne.n	8005b1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ad8:	4b49      	ldr	r3, [pc, #292]	@ (8005c00 <xTaskIncrementTick+0x150>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	603b      	str	r3, [r7, #0]
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	e7fd      	b.n	8005af6 <xTaskIncrementTick+0x46>
 8005afa:	4b41      	ldr	r3, [pc, #260]	@ (8005c00 <xTaskIncrementTick+0x150>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	4b40      	ldr	r3, [pc, #256]	@ (8005c04 <xTaskIncrementTick+0x154>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a3e      	ldr	r2, [pc, #248]	@ (8005c00 <xTaskIncrementTick+0x150>)
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	4a3e      	ldr	r2, [pc, #248]	@ (8005c04 <xTaskIncrementTick+0x154>)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c08 <xTaskIncrementTick+0x158>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a3c      	ldr	r2, [pc, #240]	@ (8005c08 <xTaskIncrementTick+0x158>)
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	f000 fae2 	bl	80060e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c0c <xTaskIncrementTick+0x15c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d349      	bcc.n	8005bba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b26:	4b36      	ldr	r3, [pc, #216]	@ (8005c00 <xTaskIncrementTick+0x150>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b30:	4b36      	ldr	r3, [pc, #216]	@ (8005c0c <xTaskIncrementTick+0x15c>)
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295
 8005b36:	601a      	str	r2, [r3, #0]
					break;
 8005b38:	e03f      	b.n	8005bba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b3a:	4b31      	ldr	r3, [pc, #196]	@ (8005c00 <xTaskIncrementTick+0x150>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d203      	bcs.n	8005b5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b52:	4a2e      	ldr	r2, [pc, #184]	@ (8005c0c <xTaskIncrementTick+0x15c>)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b58:	e02f      	b.n	8005bba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe ff26 	bl	80049b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	3318      	adds	r3, #24
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe ff1d 	bl	80049b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b7a:	4b25      	ldr	r3, [pc, #148]	@ (8005c10 <xTaskIncrementTick+0x160>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d903      	bls.n	8005b8a <xTaskIncrementTick+0xda>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b86:	4a22      	ldr	r2, [pc, #136]	@ (8005c10 <xTaskIncrementTick+0x160>)
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4a1f      	ldr	r2, [pc, #124]	@ (8005c14 <xTaskIncrementTick+0x164>)
 8005b98:	441a      	add	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f7fe fea8 	bl	80048f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005baa:	4b1b      	ldr	r3, [pc, #108]	@ (8005c18 <xTaskIncrementTick+0x168>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d3b8      	bcc.n	8005b26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bb8:	e7b5      	b.n	8005b26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bba:	4b17      	ldr	r3, [pc, #92]	@ (8005c18 <xTaskIncrementTick+0x168>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc0:	4914      	ldr	r1, [pc, #80]	@ (8005c14 <xTaskIncrementTick+0x164>)
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d901      	bls.n	8005bd6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bd6:	4b11      	ldr	r3, [pc, #68]	@ (8005c1c <xTaskIncrementTick+0x16c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005bde:	2301      	movs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	e004      	b.n	8005bee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005be4:	4b0e      	ldr	r3, [pc, #56]	@ (8005c20 <xTaskIncrementTick+0x170>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	4a0d      	ldr	r2, [pc, #52]	@ (8005c20 <xTaskIncrementTick+0x170>)
 8005bec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005bee:	697b      	ldr	r3, [r7, #20]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20000fa0 	.word	0x20000fa0
 8005bfc:	20000f7c 	.word	0x20000f7c
 8005c00:	20000f30 	.word	0x20000f30
 8005c04:	20000f34 	.word	0x20000f34
 8005c08:	20000f90 	.word	0x20000f90
 8005c0c:	20000f98 	.word	0x20000f98
 8005c10:	20000f80 	.word	0x20000f80
 8005c14:	20000aa8 	.word	0x20000aa8
 8005c18:	20000aa4 	.word	0x20000aa4
 8005c1c:	20000f8c 	.word	0x20000f8c
 8005c20:	20000f88 	.word	0x20000f88

08005c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005cd8 <vTaskSwitchContext+0xb4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c32:	4b2a      	ldr	r3, [pc, #168]	@ (8005cdc <vTaskSwitchContext+0xb8>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c38:	e047      	b.n	8005cca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005c3a:	4b28      	ldr	r3, [pc, #160]	@ (8005cdc <vTaskSwitchContext+0xb8>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c40:	4b27      	ldr	r3, [pc, #156]	@ (8005ce0 <vTaskSwitchContext+0xbc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e011      	b.n	8005c6c <vTaskSwitchContext+0x48>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <vTaskSwitchContext+0x42>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	e7fd      	b.n	8005c62 <vTaskSwitchContext+0x3e>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	491d      	ldr	r1, [pc, #116]	@ (8005ce4 <vTaskSwitchContext+0xc0>)
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0e3      	beq.n	8005c48 <vTaskSwitchContext+0x24>
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4a16      	ldr	r2, [pc, #88]	@ (8005ce4 <vTaskSwitchContext+0xc0>)
 8005c8c:	4413      	add	r3, r2
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d104      	bne.n	8005cb0 <vTaskSwitchContext+0x8c>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	605a      	str	r2, [r3, #4]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce8 <vTaskSwitchContext+0xc4>)
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4a09      	ldr	r2, [pc, #36]	@ (8005ce0 <vTaskSwitchContext+0xbc>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cc0:	4b09      	ldr	r3, [pc, #36]	@ (8005ce8 <vTaskSwitchContext+0xc4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3354      	adds	r3, #84	@ 0x54
 8005cc6:	4a09      	ldr	r2, [pc, #36]	@ (8005cec <vTaskSwitchContext+0xc8>)
 8005cc8:	6013      	str	r3, [r2, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000fa0 	.word	0x20000fa0
 8005cdc:	20000f8c 	.word	0x20000f8c
 8005ce0:	20000f80 	.word	0x20000f80
 8005ce4:	20000aa8 	.word	0x20000aa8
 8005ce8:	20000aa4 	.word	0x20000aa4
 8005cec:	20000010 	.word	0x20000010

08005cf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	60fb      	str	r3, [r7, #12]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d18:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <vTaskPlaceOnEventList+0x48>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3318      	adds	r3, #24
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7fe fe0c 	bl	800493e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d26:	2101      	movs	r1, #1
 8005d28:	6838      	ldr	r0, [r7, #0]
 8005d2a:	f000 fa87 	bl	800623c <prvAddCurrentTaskToDelayedList>
}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000aa4 	.word	0x20000aa4

08005d3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	617b      	str	r3, [r7, #20]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d66:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3318      	adds	r3, #24
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7fe fdc1 	bl	80048f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	68b8      	ldr	r0, [r7, #8]
 8005d84:	f000 fa5a 	bl	800623c <prvAddCurrentTaskToDelayedList>
	}
 8005d88:	bf00      	nop
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000aa4 	.word	0x20000aa4

08005d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	60fb      	str	r3, [r7, #12]
}
 8005dbc:	bf00      	nop
 8005dbe:	bf00      	nop
 8005dc0:	e7fd      	b.n	8005dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3318      	adds	r3, #24
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fdf2 	bl	80049b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e44 <xTaskRemoveFromEventList+0xb0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11d      	bne.n	8005e10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe fde9 	bl	80049b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de2:	4b19      	ldr	r3, [pc, #100]	@ (8005e48 <xTaskRemoveFromEventList+0xb4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d903      	bls.n	8005df2 <xTaskRemoveFromEventList+0x5e>
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	4a16      	ldr	r2, [pc, #88]	@ (8005e48 <xTaskRemoveFromEventList+0xb4>)
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4a13      	ldr	r2, [pc, #76]	@ (8005e4c <xTaskRemoveFromEventList+0xb8>)
 8005e00:	441a      	add	r2, r3
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3304      	adds	r3, #4
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f7fe fd74 	bl	80048f6 <vListInsertEnd>
 8005e0e:	e005      	b.n	8005e1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	3318      	adds	r3, #24
 8005e14:	4619      	mov	r1, r3
 8005e16:	480e      	ldr	r0, [pc, #56]	@ (8005e50 <xTaskRemoveFromEventList+0xbc>)
 8005e18:	f7fe fd6d 	bl	80048f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e20:	4b0c      	ldr	r3, [pc, #48]	@ (8005e54 <xTaskRemoveFromEventList+0xc0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d905      	bls.n	8005e36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e58 <xTaskRemoveFromEventList+0xc4>)
 8005e30:	2201      	movs	r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	e001      	b.n	8005e3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e3a:	697b      	ldr	r3, [r7, #20]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000fa0 	.word	0x20000fa0
 8005e48:	20000f80 	.word	0x20000f80
 8005e4c:	20000aa8 	.word	0x20000aa8
 8005e50:	20000f38 	.word	0x20000f38
 8005e54:	20000aa4 	.word	0x20000aa4
 8005e58:	20000f8c 	.word	0x20000f8c

08005e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e64:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <vTaskInternalSetTimeOutState+0x24>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e6c:	4b05      	ldr	r3, [pc, #20]	@ (8005e84 <vTaskInternalSetTimeOutState+0x28>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	605a      	str	r2, [r3, #4]
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20000f90 	.word	0x20000f90
 8005e84:	20000f7c 	.word	0x20000f7c

08005e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	613b      	str	r3, [r7, #16]
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	60fb      	str	r3, [r7, #12]
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	e7fd      	b.n	8005eca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005ece:	f000 fe93 	bl	8006bf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f48 <xTaskCheckForTimeOut+0xc0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d102      	bne.n	8005ef2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	e023      	b.n	8005f3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b15      	ldr	r3, [pc, #84]	@ (8005f4c <xTaskCheckForTimeOut+0xc4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d007      	beq.n	8005f0e <xTaskCheckForTimeOut+0x86>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	e015      	b.n	8005f3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d20b      	bcs.n	8005f30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff ff99 	bl	8005e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	e004      	b.n	8005f3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f36:	2301      	movs	r3, #1
 8005f38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f3a:	f000 fe8f 	bl	8006c5c <vPortExitCritical>

	return xReturn;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000f7c 	.word	0x20000f7c
 8005f4c:	20000f90 	.word	0x20000f90

08005f50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f54:	4b03      	ldr	r3, [pc, #12]	@ (8005f64 <vTaskMissedYield+0x14>)
 8005f56:	2201      	movs	r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	20000f8c 	.word	0x20000f8c

08005f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f70:	f000 f852 	bl	8006018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f74:	4b06      	ldr	r3, [pc, #24]	@ (8005f90 <prvIdleTask+0x28>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d9f9      	bls.n	8005f70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f7c:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <prvIdleTask+0x2c>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f8c:	e7f0      	b.n	8005f70 <prvIdleTask+0x8>
 8005f8e:	bf00      	nop
 8005f90:	20000aa8 	.word	0x20000aa8
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]
 8005fa2:	e00c      	b.n	8005fbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4a12      	ldr	r2, [pc, #72]	@ (8005ff8 <prvInitialiseTaskLists+0x60>)
 8005fb0:	4413      	add	r3, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fc72 	bl	800489c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	607b      	str	r3, [r7, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b37      	cmp	r3, #55	@ 0x37
 8005fc2:	d9ef      	bls.n	8005fa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fc4:	480d      	ldr	r0, [pc, #52]	@ (8005ffc <prvInitialiseTaskLists+0x64>)
 8005fc6:	f7fe fc69 	bl	800489c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fca:	480d      	ldr	r0, [pc, #52]	@ (8006000 <prvInitialiseTaskLists+0x68>)
 8005fcc:	f7fe fc66 	bl	800489c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fd0:	480c      	ldr	r0, [pc, #48]	@ (8006004 <prvInitialiseTaskLists+0x6c>)
 8005fd2:	f7fe fc63 	bl	800489c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fd6:	480c      	ldr	r0, [pc, #48]	@ (8006008 <prvInitialiseTaskLists+0x70>)
 8005fd8:	f7fe fc60 	bl	800489c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fdc:	480b      	ldr	r0, [pc, #44]	@ (800600c <prvInitialiseTaskLists+0x74>)
 8005fde:	f7fe fc5d 	bl	800489c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <prvInitialiseTaskLists+0x78>)
 8005fe4:	4a05      	ldr	r2, [pc, #20]	@ (8005ffc <prvInitialiseTaskLists+0x64>)
 8005fe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <prvInitialiseTaskLists+0x7c>)
 8005fea:	4a05      	ldr	r2, [pc, #20]	@ (8006000 <prvInitialiseTaskLists+0x68>)
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000aa8 	.word	0x20000aa8
 8005ffc:	20000f08 	.word	0x20000f08
 8006000:	20000f1c 	.word	0x20000f1c
 8006004:	20000f38 	.word	0x20000f38
 8006008:	20000f4c 	.word	0x20000f4c
 800600c:	20000f64 	.word	0x20000f64
 8006010:	20000f30 	.word	0x20000f30
 8006014:	20000f34 	.word	0x20000f34

08006018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800601e:	e019      	b.n	8006054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006020:	f000 fdea 	bl	8006bf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006024:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <prvCheckTasksWaitingTermination+0x50>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe fcbd 	bl	80049b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006036:	4b0d      	ldr	r3, [pc, #52]	@ (800606c <prvCheckTasksWaitingTermination+0x54>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3b01      	subs	r3, #1
 800603c:	4a0b      	ldr	r2, [pc, #44]	@ (800606c <prvCheckTasksWaitingTermination+0x54>)
 800603e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006040:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <prvCheckTasksWaitingTermination+0x58>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3b01      	subs	r3, #1
 8006046:	4a0a      	ldr	r2, [pc, #40]	@ (8006070 <prvCheckTasksWaitingTermination+0x58>)
 8006048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800604a:	f000 fe07 	bl	8006c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f810 	bl	8006074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006054:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <prvCheckTasksWaitingTermination+0x58>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e1      	bne.n	8006020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000f4c 	.word	0x20000f4c
 800606c:	20000f78 	.word	0x20000f78
 8006070:	20000f60 	.word	0x20000f60

08006074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3354      	adds	r3, #84	@ 0x54
 8006080:	4618      	mov	r0, r3
 8006082:	f001 f8d1 	bl	8007228 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800608c:	2b00      	cmp	r3, #0
 800608e:	d108      	bne.n	80060a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006094:	4618      	mov	r0, r3
 8006096:	f000 ff9f 	bl	8006fd8 <vPortFree>
				vPortFree( pxTCB );
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 ff9c 	bl	8006fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060a0:	e019      	b.n	80060d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d103      	bne.n	80060b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 ff93 	bl	8006fd8 <vPortFree>
	}
 80060b2:	e010      	b.n	80060d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d00b      	beq.n	80060d6 <prvDeleteTCB+0x62>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	60fb      	str	r3, [r7, #12]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <prvDeleteTCB+0x5e>
	}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006118 <prvResetNextTaskUnblockTime+0x38>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d104      	bne.n	80060fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060f0:	4b0a      	ldr	r3, [pc, #40]	@ (800611c <prvResetNextTaskUnblockTime+0x3c>)
 80060f2:	f04f 32ff 	mov.w	r2, #4294967295
 80060f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060f8:	e008      	b.n	800610c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060fa:	4b07      	ldr	r3, [pc, #28]	@ (8006118 <prvResetNextTaskUnblockTime+0x38>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	4a04      	ldr	r2, [pc, #16]	@ (800611c <prvResetNextTaskUnblockTime+0x3c>)
 800610a:	6013      	str	r3, [r2, #0]
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	20000f30 	.word	0x20000f30
 800611c:	20000f98 	.word	0x20000f98

08006120 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <xTaskGetSchedulerState+0x34>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800612e:	2301      	movs	r3, #1
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	e008      	b.n	8006146 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006134:	4b08      	ldr	r3, [pc, #32]	@ (8006158 <xTaskGetSchedulerState+0x38>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d102      	bne.n	8006142 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800613c:	2302      	movs	r3, #2
 800613e:	607b      	str	r3, [r7, #4]
 8006140:	e001      	b.n	8006146 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006146:	687b      	ldr	r3, [r7, #4]
	}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	20000f84 	.word	0x20000f84
 8006158:	20000fa0 	.word	0x20000fa0

0800615c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d058      	beq.n	8006224 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006172:	4b2f      	ldr	r3, [pc, #188]	@ (8006230 <xTaskPriorityDisinherit+0xd4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	429a      	cmp	r2, r3
 800617a:	d00b      	beq.n	8006194 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60fb      	str	r3, [r7, #12]
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	e7fd      	b.n	8006190 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	60bb      	str	r3, [r7, #8]
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	e7fd      	b.n	80061b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b8:	1e5a      	subs	r2, r3, #1
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d02c      	beq.n	8006224 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d128      	bne.n	8006224 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fe fbea 	bl	80049b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <xTaskPriorityDisinherit+0xd8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d903      	bls.n	8006204 <xTaskPriorityDisinherit+0xa8>
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	4a0c      	ldr	r2, [pc, #48]	@ (8006234 <xTaskPriorityDisinherit+0xd8>)
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4a09      	ldr	r2, [pc, #36]	@ (8006238 <xTaskPriorityDisinherit+0xdc>)
 8006212:	441a      	add	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f7fe fb6b 	bl	80048f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006224:	697b      	ldr	r3, [r7, #20]
	}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000aa4 	.word	0x20000aa4
 8006234:	20000f80 	.word	0x20000f80
 8006238:	20000aa8 	.word	0x20000aa8

0800623c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006246:	4b21      	ldr	r3, [pc, #132]	@ (80062cc <prvAddCurrentTaskToDelayedList+0x90>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800624c:	4b20      	ldr	r3, [pc, #128]	@ (80062d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3304      	adds	r3, #4
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fbac 	bl	80049b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625e:	d10a      	bne.n	8006276 <prvAddCurrentTaskToDelayedList+0x3a>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006266:	4b1a      	ldr	r3, [pc, #104]	@ (80062d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3304      	adds	r3, #4
 800626c:	4619      	mov	r1, r3
 800626e:	4819      	ldr	r0, [pc, #100]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006270:	f7fe fb41 	bl	80048f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006274:	e026      	b.n	80062c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4413      	add	r3, r2
 800627c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800627e:	4b14      	ldr	r3, [pc, #80]	@ (80062d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	429a      	cmp	r2, r3
 800628c:	d209      	bcs.n	80062a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800628e:	4b12      	ldr	r3, [pc, #72]	@ (80062d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b0f      	ldr	r3, [pc, #60]	@ (80062d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f7fe fb4f 	bl	800493e <vListInsert>
}
 80062a0:	e010      	b.n	80062c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062a2:	4b0e      	ldr	r3, [pc, #56]	@ (80062dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b0a      	ldr	r3, [pc, #40]	@ (80062d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f7fe fb45 	bl	800493e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062b4:	4b0a      	ldr	r3, [pc, #40]	@ (80062e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d202      	bcs.n	80062c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062be:	4a08      	ldr	r2, [pc, #32]	@ (80062e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	6013      	str	r3, [r2, #0]
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000f7c 	.word	0x20000f7c
 80062d0:	20000aa4 	.word	0x20000aa4
 80062d4:	20000f64 	.word	0x20000f64
 80062d8:	20000f34 	.word	0x20000f34
 80062dc:	20000f30 	.word	0x20000f30
 80062e0:	20000f98 	.word	0x20000f98

080062e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08a      	sub	sp, #40	@ 0x28
 80062e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062ee:	f000 fb13 	bl	8006918 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006368 <xTimerCreateTimerTask+0x84>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d021      	beq.n	800633e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006302:	1d3a      	adds	r2, r7, #4
 8006304:	f107 0108 	add.w	r1, r7, #8
 8006308:	f107 030c 	add.w	r3, r7, #12
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe faab 	bl	8004868 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	9202      	str	r2, [sp, #8]
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	2302      	movs	r3, #2
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	2300      	movs	r3, #0
 8006322:	460a      	mov	r2, r1
 8006324:	4911      	ldr	r1, [pc, #68]	@ (800636c <xTimerCreateTimerTask+0x88>)
 8006326:	4812      	ldr	r0, [pc, #72]	@ (8006370 <xTimerCreateTimerTask+0x8c>)
 8006328:	f7ff f8a2 	bl	8005470 <xTaskCreateStatic>
 800632c:	4603      	mov	r3, r0
 800632e:	4a11      	ldr	r2, [pc, #68]	@ (8006374 <xTimerCreateTimerTask+0x90>)
 8006330:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006332:	4b10      	ldr	r3, [pc, #64]	@ (8006374 <xTimerCreateTimerTask+0x90>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800633a:	2301      	movs	r3, #1
 800633c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	613b      	str	r3, [r7, #16]
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800635c:	697b      	ldr	r3, [r7, #20]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000fd4 	.word	0x20000fd4
 800636c:	08007424 	.word	0x08007424
 8006370:	080064b1 	.word	0x080064b1
 8006374:	20000fd8 	.word	0x20000fd8

08006378 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	@ 0x28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006386:	2300      	movs	r3, #0
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	623b      	str	r3, [r7, #32]
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063a8:	4b19      	ldr	r3, [pc, #100]	@ (8006410 <xTimerGenericCommand+0x98>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d02a      	beq.n	8006406 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b05      	cmp	r3, #5
 80063c0:	dc18      	bgt.n	80063f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063c2:	f7ff fead 	bl	8006120 <xTaskGetSchedulerState>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d109      	bne.n	80063e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063cc:	4b10      	ldr	r3, [pc, #64]	@ (8006410 <xTimerGenericCommand+0x98>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	f107 0110 	add.w	r1, r7, #16
 80063d4:	2300      	movs	r3, #0
 80063d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063d8:	f7fe fc5a 	bl	8004c90 <xQueueGenericSend>
 80063dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80063de:	e012      	b.n	8006406 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <xTimerGenericCommand+0x98>)
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	f107 0110 	add.w	r1, r7, #16
 80063e8:	2300      	movs	r3, #0
 80063ea:	2200      	movs	r2, #0
 80063ec:	f7fe fc50 	bl	8004c90 <xQueueGenericSend>
 80063f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80063f2:	e008      	b.n	8006406 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063f4:	4b06      	ldr	r3, [pc, #24]	@ (8006410 <xTimerGenericCommand+0x98>)
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	f107 0110 	add.w	r1, r7, #16
 80063fc:	2300      	movs	r3, #0
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	f7fe fd48 	bl	8004e94 <xQueueGenericSendFromISR>
 8006404:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006408:	4618      	mov	r0, r3
 800640a:	3728      	adds	r7, #40	@ 0x28
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000fd4 	.word	0x20000fd4

08006414 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af02      	add	r7, sp, #8
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800641e:	4b23      	ldr	r3, [pc, #140]	@ (80064ac <prvProcessExpiredTimer+0x98>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	3304      	adds	r3, #4
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe fabf 	bl	80049b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d023      	beq.n	8006488 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	18d1      	adds	r1, r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	6978      	ldr	r0, [r7, #20]
 800644e:	f000 f8d5 	bl	80065fc <prvInsertTimerInActiveList>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d020      	beq.n	800649a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006458:	2300      	movs	r3, #0
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	2300      	movs	r3, #0
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	2100      	movs	r1, #0
 8006462:	6978      	ldr	r0, [r7, #20]
 8006464:	f7ff ff88 	bl	8006378 <xTimerGenericCommand>
 8006468:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d114      	bne.n	800649a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	60fb      	str	r3, [r7, #12]
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	e7fd      	b.n	8006484 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800648e:	f023 0301 	bic.w	r3, r3, #1
 8006492:	b2da      	uxtb	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	6978      	ldr	r0, [r7, #20]
 80064a0:	4798      	blx	r3
}
 80064a2:	bf00      	nop
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000fcc 	.word	0x20000fcc

080064b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064b8:	f107 0308 	add.w	r3, r7, #8
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 f859 	bl	8006574 <prvGetNextExpireTime>
 80064c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4619      	mov	r1, r3
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f805 	bl	80064d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064ce:	f000 f8d7 	bl	8006680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064d2:	bf00      	nop
 80064d4:	e7f0      	b.n	80064b8 <prvTimerTask+0x8>
	...

080064d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064e2:	f7ff fa29 	bl	8005938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064e6:	f107 0308 	add.w	r3, r7, #8
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 f866 	bl	80065bc <prvSampleTimeNow>
 80064f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d130      	bne.n	800655a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <prvProcessTimerOrBlockTask+0x3c>
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	429a      	cmp	r2, r3
 8006504:	d806      	bhi.n	8006514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006506:	f7ff fa25 	bl	8005954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800650a:	68f9      	ldr	r1, [r7, #12]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ff81 	bl	8006414 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006512:	e024      	b.n	800655e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800651a:	4b13      	ldr	r3, [pc, #76]	@ (8006568 <prvProcessTimerOrBlockTask+0x90>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <prvProcessTimerOrBlockTask+0x50>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <prvProcessTimerOrBlockTask+0x52>
 8006528:	2300      	movs	r3, #0
 800652a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800652c:	4b0f      	ldr	r3, [pc, #60]	@ (800656c <prvProcessTimerOrBlockTask+0x94>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	4619      	mov	r1, r3
 800653a:	f7fe ff65 	bl	8005408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800653e:	f7ff fa09 	bl	8005954 <xTaskResumeAll>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006548:	4b09      	ldr	r3, [pc, #36]	@ (8006570 <prvProcessTimerOrBlockTask+0x98>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
}
 8006558:	e001      	b.n	800655e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800655a:	f7ff f9fb 	bl	8005954 <xTaskResumeAll>
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000fd0 	.word	0x20000fd0
 800656c:	20000fd4 	.word	0x20000fd4
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800657c:	4b0e      	ldr	r3, [pc, #56]	@ (80065b8 <prvGetNextExpireTime+0x44>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <prvGetNextExpireTime+0x16>
 8006586:	2201      	movs	r2, #1
 8006588:	e000      	b.n	800658c <prvGetNextExpireTime+0x18>
 800658a:	2200      	movs	r2, #0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d105      	bne.n	80065a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006598:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <prvGetNextExpireTime+0x44>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e001      	b.n	80065a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065a8:	68fb      	ldr	r3, [r7, #12]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000fcc 	.word	0x20000fcc

080065bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065c4:	f7ff fa64 	bl	8005a90 <xTaskGetTickCount>
 80065c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065ca:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <prvSampleTimeNow+0x3c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d205      	bcs.n	80065e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065d4:	f000 f93a 	bl	800684c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	e002      	b.n	80065e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065e6:	4a04      	ldr	r2, [pc, #16]	@ (80065f8 <prvSampleTimeNow+0x3c>)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000fdc 	.word	0x20000fdc

080065fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	d812      	bhi.n	8006648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	429a      	cmp	r2, r3
 800662e:	d302      	bcc.n	8006636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e01b      	b.n	800666e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006636:	4b10      	ldr	r3, [pc, #64]	@ (8006678 <prvInsertTimerInActiveList+0x7c>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7fe f97c 	bl	800493e <vListInsert>
 8006646:	e012      	b.n	800666e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d206      	bcs.n	800665e <prvInsertTimerInActiveList+0x62>
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d302      	bcc.n	800665e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e007      	b.n	800666e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800665e:	4b07      	ldr	r3, [pc, #28]	@ (800667c <prvInsertTimerInActiveList+0x80>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7fe f968 	bl	800493e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800666e:	697b      	ldr	r3, [r7, #20]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20000fd0 	.word	0x20000fd0
 800667c:	20000fcc 	.word	0x20000fcc

08006680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08e      	sub	sp, #56	@ 0x38
 8006684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006686:	e0ce      	b.n	8006826 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	da19      	bge.n	80066c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	3304      	adds	r3, #4
 8006692:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	61fb      	str	r3, [r7, #28]
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066b8:	6850      	ldr	r0, [r2, #4]
 80066ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066bc:	6892      	ldr	r2, [r2, #8]
 80066be:	4611      	mov	r1, r2
 80066c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f2c0 80ae 	blt.w	8006826 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d8:	3304      	adds	r3, #4
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe f968 	bl	80049b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066e0:	463b      	mov	r3, r7
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff ff6a 	bl	80065bc <prvSampleTimeNow>
 80066e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b09      	cmp	r3, #9
 80066ee:	f200 8097 	bhi.w	8006820 <prvProcessReceivedCommands+0x1a0>
 80066f2:	a201      	add	r2, pc, #4	@ (adr r2, 80066f8 <prvProcessReceivedCommands+0x78>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006721 	.word	0x08006721
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006721 	.word	0x08006721
 8006704:	08006797 	.word	0x08006797
 8006708:	080067ab 	.word	0x080067ab
 800670c:	080067f7 	.word	0x080067f7
 8006710:	08006721 	.word	0x08006721
 8006714:	08006721 	.word	0x08006721
 8006718:	08006797 	.word	0x08006797
 800671c:	080067ab 	.word	0x080067ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	18d1      	adds	r1, r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006740:	f7ff ff5c 	bl	80065fc <prvInsertTimerInActiveList>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d06c      	beq.n	8006824 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d061      	beq.n	8006824 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	441a      	add	r2, r3
 8006768:	2300      	movs	r3, #0
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	2100      	movs	r1, #0
 8006770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006772:	f7ff fe01 	bl	8006378 <xTimerGenericCommand>
 8006776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d152      	bne.n	8006824 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	61bb      	str	r3, [r7, #24]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006798:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067a8:	e03d      	b.n	8006826 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	617b      	str	r3, [r7, #20]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	18d1      	adds	r1, r2, r3
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067f0:	f7ff ff04 	bl	80065fc <prvInsertTimerInActiveList>
					break;
 80067f4:	e017      	b.n	8006826 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006806:	f000 fbe7 	bl	8006fd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800680a:	e00c      	b.n	8006826 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	b2da      	uxtb	r2, r3
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800681e:	e002      	b.n	8006826 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006820:	bf00      	nop
 8006822:	e000      	b.n	8006826 <prvProcessReceivedCommands+0x1a6>
					break;
 8006824:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006826:	4b08      	ldr	r3, [pc, #32]	@ (8006848 <prvProcessReceivedCommands+0x1c8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	1d39      	adds	r1, r7, #4
 800682c:	2200      	movs	r2, #0
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fbce 	bl	8004fd0 <xQueueReceive>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	f47f af26 	bne.w	8006688 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	3730      	adds	r7, #48	@ 0x30
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000fd4 	.word	0x20000fd4

0800684c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006852:	e049      	b.n	80068e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006854:	4b2e      	ldr	r3, [pc, #184]	@ (8006910 <prvSwitchTimerLists+0xc4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800685e:	4b2c      	ldr	r3, [pc, #176]	@ (8006910 <prvSwitchTimerLists+0xc4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3304      	adds	r3, #4
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe f89f 	bl	80049b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d02f      	beq.n	80068e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	429a      	cmp	r2, r3
 8006898:	d90e      	bls.n	80068b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006910 <prvSwitchTimerLists+0xc4>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f7fe f844 	bl	800493e <vListInsert>
 80068b6:	e017      	b.n	80068e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068b8:	2300      	movs	r3, #0
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	2300      	movs	r3, #0
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	2100      	movs	r1, #0
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff fd58 	bl	8006378 <xTimerGenericCommand>
 80068c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10b      	bne.n	80068e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	603b      	str	r3, [r7, #0]
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	e7fd      	b.n	80068e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068e8:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <prvSwitchTimerLists+0xc4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1b0      	bne.n	8006854 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068f2:	4b07      	ldr	r3, [pc, #28]	@ (8006910 <prvSwitchTimerLists+0xc4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068f8:	4b06      	ldr	r3, [pc, #24]	@ (8006914 <prvSwitchTimerLists+0xc8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a04      	ldr	r2, [pc, #16]	@ (8006910 <prvSwitchTimerLists+0xc4>)
 80068fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006900:	4a04      	ldr	r2, [pc, #16]	@ (8006914 <prvSwitchTimerLists+0xc8>)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6013      	str	r3, [r2, #0]
}
 8006906:	bf00      	nop
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000fcc 	.word	0x20000fcc
 8006914:	20000fd0 	.word	0x20000fd0

08006918 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800691e:	f000 f96b 	bl	8006bf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006922:	4b15      	ldr	r3, [pc, #84]	@ (8006978 <prvCheckForValidListAndQueue+0x60>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d120      	bne.n	800696c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800692a:	4814      	ldr	r0, [pc, #80]	@ (800697c <prvCheckForValidListAndQueue+0x64>)
 800692c:	f7fd ffb6 	bl	800489c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006930:	4813      	ldr	r0, [pc, #76]	@ (8006980 <prvCheckForValidListAndQueue+0x68>)
 8006932:	f7fd ffb3 	bl	800489c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006936:	4b13      	ldr	r3, [pc, #76]	@ (8006984 <prvCheckForValidListAndQueue+0x6c>)
 8006938:	4a10      	ldr	r2, [pc, #64]	@ (800697c <prvCheckForValidListAndQueue+0x64>)
 800693a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800693c:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <prvCheckForValidListAndQueue+0x70>)
 800693e:	4a10      	ldr	r2, [pc, #64]	@ (8006980 <prvCheckForValidListAndQueue+0x68>)
 8006940:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006942:	2300      	movs	r3, #0
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4b11      	ldr	r3, [pc, #68]	@ (800698c <prvCheckForValidListAndQueue+0x74>)
 8006948:	4a11      	ldr	r2, [pc, #68]	@ (8006990 <prvCheckForValidListAndQueue+0x78>)
 800694a:	2110      	movs	r1, #16
 800694c:	200a      	movs	r0, #10
 800694e:	f7fe f8c3 	bl	8004ad8 <xQueueGenericCreateStatic>
 8006952:	4603      	mov	r3, r0
 8006954:	4a08      	ldr	r2, [pc, #32]	@ (8006978 <prvCheckForValidListAndQueue+0x60>)
 8006956:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006958:	4b07      	ldr	r3, [pc, #28]	@ (8006978 <prvCheckForValidListAndQueue+0x60>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006960:	4b05      	ldr	r3, [pc, #20]	@ (8006978 <prvCheckForValidListAndQueue+0x60>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	490b      	ldr	r1, [pc, #44]	@ (8006994 <prvCheckForValidListAndQueue+0x7c>)
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fd24 	bl	80053b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800696c:	f000 f976 	bl	8006c5c <vPortExitCritical>
}
 8006970:	bf00      	nop
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000fd4 	.word	0x20000fd4
 800697c:	20000fa4 	.word	0x20000fa4
 8006980:	20000fb8 	.word	0x20000fb8
 8006984:	20000fcc 	.word	0x20000fcc
 8006988:	20000fd0 	.word	0x20000fd0
 800698c:	20001080 	.word	0x20001080
 8006990:	20000fe0 	.word	0x20000fe0
 8006994:	0800742c 	.word	0x0800742c

08006998 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3b04      	subs	r3, #4
 80069a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3b04      	subs	r3, #4
 80069b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f023 0201 	bic.w	r2, r3, #1
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3b04      	subs	r3, #4
 80069c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069c8:	4a0c      	ldr	r2, [pc, #48]	@ (80069fc <pxPortInitialiseStack+0x64>)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3b14      	subs	r3, #20
 80069d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3b04      	subs	r3, #4
 80069de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f06f 0202 	mvn.w	r2, #2
 80069e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3b20      	subs	r3, #32
 80069ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069ee:	68fb      	ldr	r3, [r7, #12]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	08006a01 	.word	0x08006a01

08006a00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a0a:	4b13      	ldr	r3, [pc, #76]	@ (8006a58 <prvTaskExitError+0x58>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d00b      	beq.n	8006a2c <prvTaskExitError+0x2c>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60fb      	str	r3, [r7, #12]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <prvTaskExitError+0x28>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	60bb      	str	r3, [r7, #8]
}
 8006a3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a40:	bf00      	nop
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0fc      	beq.n	8006a42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	2000000c 	.word	0x2000000c
 8006a5c:	00000000 	.word	0x00000000

08006a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a60:	4b07      	ldr	r3, [pc, #28]	@ (8006a80 <pxCurrentTCBConst2>)
 8006a62:	6819      	ldr	r1, [r3, #0]
 8006a64:	6808      	ldr	r0, [r1, #0]
 8006a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	f380 8809 	msr	PSP, r0
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8811 	msr	BASEPRI, r0
 8006a7a:	4770      	bx	lr
 8006a7c:	f3af 8000 	nop.w

08006a80 <pxCurrentTCBConst2>:
 8006a80:	20000aa4 	.word	0x20000aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a88:	4808      	ldr	r0, [pc, #32]	@ (8006aac <prvPortStartFirstTask+0x24>)
 8006a8a:	6800      	ldr	r0, [r0, #0]
 8006a8c:	6800      	ldr	r0, [r0, #0]
 8006a8e:	f380 8808 	msr	MSP, r0
 8006a92:	f04f 0000 	mov.w	r0, #0
 8006a96:	f380 8814 	msr	CONTROL, r0
 8006a9a:	b662      	cpsie	i
 8006a9c:	b661      	cpsie	f
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	df00      	svc	0
 8006aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006aaa:	bf00      	nop
 8006aac:	e000ed08 	.word	0xe000ed08

08006ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ab6:	4b47      	ldr	r3, [pc, #284]	@ (8006bd4 <xPortStartScheduler+0x124>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a47      	ldr	r2, [pc, #284]	@ (8006bd8 <xPortStartScheduler+0x128>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d10b      	bne.n	8006ad8 <xPortStartScheduler+0x28>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	e7fd      	b.n	8006ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8006bd4 <xPortStartScheduler+0x124>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a3f      	ldr	r2, [pc, #252]	@ (8006bdc <xPortStartScheduler+0x12c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d10b      	bne.n	8006afa <xPortStartScheduler+0x4a>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	613b      	str	r3, [r7, #16]
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop
 8006af8:	e7fd      	b.n	8006af6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006afa:	4b39      	ldr	r3, [pc, #228]	@ (8006be0 <xPortStartScheduler+0x130>)
 8006afc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	22ff      	movs	r2, #255	@ 0xff
 8006b0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	4b31      	ldr	r3, [pc, #196]	@ (8006be4 <xPortStartScheduler+0x134>)
 8006b20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b22:	4b31      	ldr	r3, [pc, #196]	@ (8006be8 <xPortStartScheduler+0x138>)
 8006b24:	2207      	movs	r2, #7
 8006b26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b28:	e009      	b.n	8006b3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8006be8 <xPortStartScheduler+0x138>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	4a2d      	ldr	r2, [pc, #180]	@ (8006be8 <xPortStartScheduler+0x138>)
 8006b32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b46:	2b80      	cmp	r3, #128	@ 0x80
 8006b48:	d0ef      	beq.n	8006b2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b4a:	4b27      	ldr	r3, [pc, #156]	@ (8006be8 <xPortStartScheduler+0x138>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1c3 0307 	rsb	r3, r3, #7
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d00b      	beq.n	8006b6e <xPortStartScheduler+0xbe>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	60bb      	str	r3, [r7, #8]
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	e7fd      	b.n	8006b6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006be8 <xPortStartScheduler+0x138>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	4a1c      	ldr	r2, [pc, #112]	@ (8006be8 <xPortStartScheduler+0x138>)
 8006b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b78:	4b1b      	ldr	r3, [pc, #108]	@ (8006be8 <xPortStartScheduler+0x138>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b80:	4a19      	ldr	r2, [pc, #100]	@ (8006be8 <xPortStartScheduler+0x138>)
 8006b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b8c:	4b17      	ldr	r3, [pc, #92]	@ (8006bec <xPortStartScheduler+0x13c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a16      	ldr	r2, [pc, #88]	@ (8006bec <xPortStartScheduler+0x13c>)
 8006b92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b98:	4b14      	ldr	r3, [pc, #80]	@ (8006bec <xPortStartScheduler+0x13c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a13      	ldr	r2, [pc, #76]	@ (8006bec <xPortStartScheduler+0x13c>)
 8006b9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ba4:	f000 f8da 	bl	8006d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ba8:	4b11      	ldr	r3, [pc, #68]	@ (8006bf0 <xPortStartScheduler+0x140>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bae:	f000 f8f9 	bl	8006da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bb2:	4b10      	ldr	r3, [pc, #64]	@ (8006bf4 <xPortStartScheduler+0x144>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8006bf4 <xPortStartScheduler+0x144>)
 8006bb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bbe:	f7ff ff63 	bl	8006a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bc2:	f7ff f82f 	bl	8005c24 <vTaskSwitchContext>
	prvTaskExitError();
 8006bc6:	f7ff ff1b 	bl	8006a00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	e000ed00 	.word	0xe000ed00
 8006bd8:	410fc271 	.word	0x410fc271
 8006bdc:	410fc270 	.word	0x410fc270
 8006be0:	e000e400 	.word	0xe000e400
 8006be4:	200010d0 	.word	0x200010d0
 8006be8:	200010d4 	.word	0x200010d4
 8006bec:	e000ed20 	.word	0xe000ed20
 8006bf0:	2000000c 	.word	0x2000000c
 8006bf4:	e000ef34 	.word	0xe000ef34

08006bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	607b      	str	r3, [r7, #4]
}
 8006c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c12:	4b10      	ldr	r3, [pc, #64]	@ (8006c54 <vPortEnterCritical+0x5c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3301      	adds	r3, #1
 8006c18:	4a0e      	ldr	r2, [pc, #56]	@ (8006c54 <vPortEnterCritical+0x5c>)
 8006c1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c54 <vPortEnterCritical+0x5c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d110      	bne.n	8006c46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c24:	4b0c      	ldr	r3, [pc, #48]	@ (8006c58 <vPortEnterCritical+0x60>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00b      	beq.n	8006c46 <vPortEnterCritical+0x4e>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	603b      	str	r3, [r7, #0]
}
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	e7fd      	b.n	8006c42 <vPortEnterCritical+0x4a>
	}
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	2000000c 	.word	0x2000000c
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c62:	4b12      	ldr	r3, [pc, #72]	@ (8006cac <vPortExitCritical+0x50>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10b      	bne.n	8006c82 <vPortExitCritical+0x26>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	607b      	str	r3, [r7, #4]
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	e7fd      	b.n	8006c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c82:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <vPortExitCritical+0x50>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	4a08      	ldr	r2, [pc, #32]	@ (8006cac <vPortExitCritical+0x50>)
 8006c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c8c:	4b07      	ldr	r3, [pc, #28]	@ (8006cac <vPortExitCritical+0x50>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d105      	bne.n	8006ca0 <vPortExitCritical+0x44>
 8006c94:	2300      	movs	r3, #0
 8006c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f383 8811 	msr	BASEPRI, r3
}
 8006c9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	2000000c 	.word	0x2000000c

08006cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cb0:	f3ef 8009 	mrs	r0, PSP
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	4b15      	ldr	r3, [pc, #84]	@ (8006d10 <pxCurrentTCBConst>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	f01e 0f10 	tst.w	lr, #16
 8006cc0:	bf08      	it	eq
 8006cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cca:	6010      	str	r0, [r2, #0]
 8006ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006cd4:	f380 8811 	msr	BASEPRI, r0
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f7fe ffa0 	bl	8005c24 <vTaskSwitchContext>
 8006ce4:	f04f 0000 	mov.w	r0, #0
 8006ce8:	f380 8811 	msr	BASEPRI, r0
 8006cec:	bc09      	pop	{r0, r3}
 8006cee:	6819      	ldr	r1, [r3, #0]
 8006cf0:	6808      	ldr	r0, [r1, #0]
 8006cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf6:	f01e 0f10 	tst.w	lr, #16
 8006cfa:	bf08      	it	eq
 8006cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d00:	f380 8809 	msr	PSP, r0
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	f3af 8000 	nop.w

08006d10 <pxCurrentTCBConst>:
 8006d10:	20000aa4 	.word	0x20000aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop

08006d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	607b      	str	r3, [r7, #4]
}
 8006d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d32:	f7fe febd 	bl	8005ab0 <xTaskIncrementTick>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	@ (8006d58 <xPortSysTickHandler+0x40>)
 8006d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	2300      	movs	r3, #0
 8006d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	f383 8811 	msr	BASEPRI, r3
}
 8006d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	e000ed04 	.word	0xe000ed04

08006d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d60:	4b0b      	ldr	r3, [pc, #44]	@ (8006d90 <vPortSetupTimerInterrupt+0x34>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d66:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <vPortSetupTimerInterrupt+0x38>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <vPortSetupTimerInterrupt+0x3c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0a      	ldr	r2, [pc, #40]	@ (8006d9c <vPortSetupTimerInterrupt+0x40>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	099b      	lsrs	r3, r3, #6
 8006d78:	4a09      	ldr	r2, [pc, #36]	@ (8006da0 <vPortSetupTimerInterrupt+0x44>)
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d7e:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <vPortSetupTimerInterrupt+0x34>)
 8006d80:	2207      	movs	r2, #7
 8006d82:	601a      	str	r2, [r3, #0]
}
 8006d84:	bf00      	nop
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	e000e010 	.word	0xe000e010
 8006d94:	e000e018 	.word	0xe000e018
 8006d98:	20000000 	.word	0x20000000
 8006d9c:	10624dd3 	.word	0x10624dd3
 8006da0:	e000e014 	.word	0xe000e014

08006da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006da4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006db4 <vPortEnableVFP+0x10>
 8006da8:	6801      	ldr	r1, [r0, #0]
 8006daa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006dae:	6001      	str	r1, [r0, #0]
 8006db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006db2:	bf00      	nop
 8006db4:	e000ed88 	.word	0xe000ed88

08006db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dbe:	f3ef 8305 	mrs	r3, IPSR
 8006dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b0f      	cmp	r3, #15
 8006dc8:	d915      	bls.n	8006df6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dca:	4a18      	ldr	r2, [pc, #96]	@ (8006e2c <vPortValidateInterruptPriority+0x74>)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dd4:	4b16      	ldr	r3, [pc, #88]	@ (8006e30 <vPortValidateInterruptPriority+0x78>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	7afa      	ldrb	r2, [r7, #11]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d20b      	bcs.n	8006df6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	607b      	str	r3, [r7, #4]
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	e7fd      	b.n	8006df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006df6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e34 <vPortValidateInterruptPriority+0x7c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8006e38 <vPortValidateInterruptPriority+0x80>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d90b      	bls.n	8006e1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	603b      	str	r3, [r7, #0]
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	e7fd      	b.n	8006e1a <vPortValidateInterruptPriority+0x62>
	}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	e000e3f0 	.word	0xe000e3f0
 8006e30:	200010d0 	.word	0x200010d0
 8006e34:	e000ed0c 	.word	0xe000ed0c
 8006e38:	200010d4 	.word	0x200010d4

08006e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	@ 0x28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e48:	f7fe fd76 	bl	8005938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8006fc0 <pvPortMalloc+0x184>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e54:	f000 f924 	bl	80070a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e58:	4b5a      	ldr	r3, [pc, #360]	@ (8006fc4 <pvPortMalloc+0x188>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 8095 	bne.w	8006f90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01e      	beq.n	8006eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d015      	beq.n	8006eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f023 0307 	bic.w	r3, r3, #7
 8006e84:	3308      	adds	r3, #8
 8006e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00b      	beq.n	8006eaa <pvPortMalloc+0x6e>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	617b      	str	r3, [r7, #20]
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop
 8006ea8:	e7fd      	b.n	8006ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d06f      	beq.n	8006f90 <pvPortMalloc+0x154>
 8006eb0:	4b45      	ldr	r3, [pc, #276]	@ (8006fc8 <pvPortMalloc+0x18c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d86a      	bhi.n	8006f90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eba:	4b44      	ldr	r3, [pc, #272]	@ (8006fcc <pvPortMalloc+0x190>)
 8006ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ebe:	4b43      	ldr	r3, [pc, #268]	@ (8006fcc <pvPortMalloc+0x190>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ec4:	e004      	b.n	8006ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d903      	bls.n	8006ee2 <pvPortMalloc+0xa6>
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f1      	bne.n	8006ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ee2:	4b37      	ldr	r3, [pc, #220]	@ (8006fc0 <pvPortMalloc+0x184>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d051      	beq.n	8006f90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2208      	movs	r2, #8
 8006ef2:	4413      	add	r3, r2
 8006ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	1ad2      	subs	r2, r2, r3
 8006f06:	2308      	movs	r3, #8
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d920      	bls.n	8006f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <pvPortMalloc+0xfc>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	613b      	str	r3, [r7, #16]
}
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f4a:	69b8      	ldr	r0, [r7, #24]
 8006f4c:	f000 f90a 	bl	8007164 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f50:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc8 <pvPortMalloc+0x18c>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc8 <pvPortMalloc+0x18c>)
 8006f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc8 <pvPortMalloc+0x18c>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd0 <pvPortMalloc+0x194>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d203      	bcs.n	8006f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f6a:	4b17      	ldr	r3, [pc, #92]	@ (8006fc8 <pvPortMalloc+0x18c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a18      	ldr	r2, [pc, #96]	@ (8006fd0 <pvPortMalloc+0x194>)
 8006f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	4b13      	ldr	r3, [pc, #76]	@ (8006fc4 <pvPortMalloc+0x188>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f86:	4b13      	ldr	r3, [pc, #76]	@ (8006fd4 <pvPortMalloc+0x198>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	4a11      	ldr	r2, [pc, #68]	@ (8006fd4 <pvPortMalloc+0x198>)
 8006f8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f90:	f7fe fce0 	bl	8005954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <pvPortMalloc+0x17a>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	60fb      	str	r3, [r7, #12]
}
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop
 8006fb4:	e7fd      	b.n	8006fb2 <pvPortMalloc+0x176>
	return pvReturn;
 8006fb6:	69fb      	ldr	r3, [r7, #28]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3728      	adds	r7, #40	@ 0x28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20004ce0 	.word	0x20004ce0
 8006fc4:	20004cf4 	.word	0x20004cf4
 8006fc8:	20004ce4 	.word	0x20004ce4
 8006fcc:	20004cd8 	.word	0x20004cd8
 8006fd0:	20004ce8 	.word	0x20004ce8
 8006fd4:	20004cec 	.word	0x20004cec

08006fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d04f      	beq.n	800708a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fea:	2308      	movs	r3, #8
 8006fec:	425b      	negs	r3, r3
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	4b25      	ldr	r3, [pc, #148]	@ (8007094 <vPortFree+0xbc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4013      	ands	r3, r2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10b      	bne.n	800701e <vPortFree+0x46>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	60fb      	str	r3, [r7, #12]
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	e7fd      	b.n	800701a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00b      	beq.n	800703e <vPortFree+0x66>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60bb      	str	r3, [r7, #8]
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop
 800703c:	e7fd      	b.n	800703a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	4b14      	ldr	r3, [pc, #80]	@ (8007094 <vPortFree+0xbc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4013      	ands	r3, r2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01e      	beq.n	800708a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d11a      	bne.n	800708a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	4b0e      	ldr	r3, [pc, #56]	@ (8007094 <vPortFree+0xbc>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	43db      	mvns	r3, r3
 800705e:	401a      	ands	r2, r3
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007064:	f7fe fc68 	bl	8005938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <vPortFree+0xc0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4413      	add	r3, r2
 8007072:	4a09      	ldr	r2, [pc, #36]	@ (8007098 <vPortFree+0xc0>)
 8007074:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007076:	6938      	ldr	r0, [r7, #16]
 8007078:	f000 f874 	bl	8007164 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800707c:	4b07      	ldr	r3, [pc, #28]	@ (800709c <vPortFree+0xc4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3301      	adds	r3, #1
 8007082:	4a06      	ldr	r2, [pc, #24]	@ (800709c <vPortFree+0xc4>)
 8007084:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007086:	f7fe fc65 	bl	8005954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800708a:	bf00      	nop
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20004cf4 	.word	0x20004cf4
 8007098:	20004ce4 	.word	0x20004ce4
 800709c:	20004cf0 	.word	0x20004cf0

080070a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80070aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070ac:	4b27      	ldr	r3, [pc, #156]	@ (800714c <prvHeapInit+0xac>)
 80070ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00c      	beq.n	80070d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3307      	adds	r3, #7
 80070be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0307 	bic.w	r3, r3, #7
 80070c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	4a1f      	ldr	r2, [pc, #124]	@ (800714c <prvHeapInit+0xac>)
 80070d0:	4413      	add	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007150 <prvHeapInit+0xb0>)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070de:	4b1c      	ldr	r3, [pc, #112]	@ (8007150 <prvHeapInit+0xb0>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	4413      	add	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070ec:	2208      	movs	r2, #8
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1a9b      	subs	r3, r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0307 	bic.w	r3, r3, #7
 80070fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4a15      	ldr	r2, [pc, #84]	@ (8007154 <prvHeapInit+0xb4>)
 8007100:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007102:	4b14      	ldr	r3, [pc, #80]	@ (8007154 <prvHeapInit+0xb4>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2200      	movs	r2, #0
 8007108:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800710a:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <prvHeapInit+0xb4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	1ad2      	subs	r2, r2, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007120:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <prvHeapInit+0xb4>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a0a      	ldr	r2, [pc, #40]	@ (8007158 <prvHeapInit+0xb8>)
 800712e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4a09      	ldr	r2, [pc, #36]	@ (800715c <prvHeapInit+0xbc>)
 8007136:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007138:	4b09      	ldr	r3, [pc, #36]	@ (8007160 <prvHeapInit+0xc0>)
 800713a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800713e:	601a      	str	r2, [r3, #0]
}
 8007140:	bf00      	nop
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	200010d8 	.word	0x200010d8
 8007150:	20004cd8 	.word	0x20004cd8
 8007154:	20004ce0 	.word	0x20004ce0
 8007158:	20004ce8 	.word	0x20004ce8
 800715c:	20004ce4 	.word	0x20004ce4
 8007160:	20004cf4 	.word	0x20004cf4

08007164 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800716c:	4b28      	ldr	r3, [pc, #160]	@ (8007210 <prvInsertBlockIntoFreeList+0xac>)
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	e002      	b.n	8007178 <prvInsertBlockIntoFreeList+0x14>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	429a      	cmp	r2, r3
 8007180:	d8f7      	bhi.n	8007172 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	4413      	add	r3, r2
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d108      	bne.n	80071a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	441a      	add	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	441a      	add	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d118      	bne.n	80071ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	4b15      	ldr	r3, [pc, #84]	@ (8007214 <prvInsertBlockIntoFreeList+0xb0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d00d      	beq.n	80071e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	441a      	add	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	e008      	b.n	80071f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007214 <prvInsertBlockIntoFreeList+0xb0>)
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	e003      	b.n	80071f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d002      	beq.n	8007202 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007202:	bf00      	nop
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20004cd8 	.word	0x20004cd8
 8007214:	20004ce0 	.word	0x20004ce0

08007218 <memset>:
 8007218:	4402      	add	r2, r0
 800721a:	4603      	mov	r3, r0
 800721c:	4293      	cmp	r3, r2
 800721e:	d100      	bne.n	8007222 <memset+0xa>
 8007220:	4770      	bx	lr
 8007222:	f803 1b01 	strb.w	r1, [r3], #1
 8007226:	e7f9      	b.n	800721c <memset+0x4>

08007228 <_reclaim_reent>:
 8007228:	4b2d      	ldr	r3, [pc, #180]	@ (80072e0 <_reclaim_reent+0xb8>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4283      	cmp	r3, r0
 800722e:	b570      	push	{r4, r5, r6, lr}
 8007230:	4604      	mov	r4, r0
 8007232:	d053      	beq.n	80072dc <_reclaim_reent+0xb4>
 8007234:	69c3      	ldr	r3, [r0, #28]
 8007236:	b31b      	cbz	r3, 8007280 <_reclaim_reent+0x58>
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	b163      	cbz	r3, 8007256 <_reclaim_reent+0x2e>
 800723c:	2500      	movs	r5, #0
 800723e:	69e3      	ldr	r3, [r4, #28]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	5959      	ldr	r1, [r3, r5]
 8007244:	b9b1      	cbnz	r1, 8007274 <_reclaim_reent+0x4c>
 8007246:	3504      	adds	r5, #4
 8007248:	2d80      	cmp	r5, #128	@ 0x80
 800724a:	d1f8      	bne.n	800723e <_reclaim_reent+0x16>
 800724c:	69e3      	ldr	r3, [r4, #28]
 800724e:	4620      	mov	r0, r4
 8007250:	68d9      	ldr	r1, [r3, #12]
 8007252:	f000 f87b 	bl	800734c <_free_r>
 8007256:	69e3      	ldr	r3, [r4, #28]
 8007258:	6819      	ldr	r1, [r3, #0]
 800725a:	b111      	cbz	r1, 8007262 <_reclaim_reent+0x3a>
 800725c:	4620      	mov	r0, r4
 800725e:	f000 f875 	bl	800734c <_free_r>
 8007262:	69e3      	ldr	r3, [r4, #28]
 8007264:	689d      	ldr	r5, [r3, #8]
 8007266:	b15d      	cbz	r5, 8007280 <_reclaim_reent+0x58>
 8007268:	4629      	mov	r1, r5
 800726a:	4620      	mov	r0, r4
 800726c:	682d      	ldr	r5, [r5, #0]
 800726e:	f000 f86d 	bl	800734c <_free_r>
 8007272:	e7f8      	b.n	8007266 <_reclaim_reent+0x3e>
 8007274:	680e      	ldr	r6, [r1, #0]
 8007276:	4620      	mov	r0, r4
 8007278:	f000 f868 	bl	800734c <_free_r>
 800727c:	4631      	mov	r1, r6
 800727e:	e7e1      	b.n	8007244 <_reclaim_reent+0x1c>
 8007280:	6961      	ldr	r1, [r4, #20]
 8007282:	b111      	cbz	r1, 800728a <_reclaim_reent+0x62>
 8007284:	4620      	mov	r0, r4
 8007286:	f000 f861 	bl	800734c <_free_r>
 800728a:	69e1      	ldr	r1, [r4, #28]
 800728c:	b111      	cbz	r1, 8007294 <_reclaim_reent+0x6c>
 800728e:	4620      	mov	r0, r4
 8007290:	f000 f85c 	bl	800734c <_free_r>
 8007294:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007296:	b111      	cbz	r1, 800729e <_reclaim_reent+0x76>
 8007298:	4620      	mov	r0, r4
 800729a:	f000 f857 	bl	800734c <_free_r>
 800729e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072a0:	b111      	cbz	r1, 80072a8 <_reclaim_reent+0x80>
 80072a2:	4620      	mov	r0, r4
 80072a4:	f000 f852 	bl	800734c <_free_r>
 80072a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80072aa:	b111      	cbz	r1, 80072b2 <_reclaim_reent+0x8a>
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 f84d 	bl	800734c <_free_r>
 80072b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80072b4:	b111      	cbz	r1, 80072bc <_reclaim_reent+0x94>
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 f848 	bl	800734c <_free_r>
 80072bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80072be:	b111      	cbz	r1, 80072c6 <_reclaim_reent+0x9e>
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 f843 	bl	800734c <_free_r>
 80072c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80072c8:	b111      	cbz	r1, 80072d0 <_reclaim_reent+0xa8>
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f83e 	bl	800734c <_free_r>
 80072d0:	6a23      	ldr	r3, [r4, #32]
 80072d2:	b11b      	cbz	r3, 80072dc <_reclaim_reent+0xb4>
 80072d4:	4620      	mov	r0, r4
 80072d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072da:	4718      	bx	r3
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
 80072de:	bf00      	nop
 80072e0:	20000010 	.word	0x20000010

080072e4 <__libc_init_array>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	4d0d      	ldr	r5, [pc, #52]	@ (800731c <__libc_init_array+0x38>)
 80072e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007320 <__libc_init_array+0x3c>)
 80072ea:	1b64      	subs	r4, r4, r5
 80072ec:	10a4      	asrs	r4, r4, #2
 80072ee:	2600      	movs	r6, #0
 80072f0:	42a6      	cmp	r6, r4
 80072f2:	d109      	bne.n	8007308 <__libc_init_array+0x24>
 80072f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007324 <__libc_init_array+0x40>)
 80072f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007328 <__libc_init_array+0x44>)
 80072f8:	f000 f87e 	bl	80073f8 <_init>
 80072fc:	1b64      	subs	r4, r4, r5
 80072fe:	10a4      	asrs	r4, r4, #2
 8007300:	2600      	movs	r6, #0
 8007302:	42a6      	cmp	r6, r4
 8007304:	d105      	bne.n	8007312 <__libc_init_array+0x2e>
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	f855 3b04 	ldr.w	r3, [r5], #4
 800730c:	4798      	blx	r3
 800730e:	3601      	adds	r6, #1
 8007310:	e7ee      	b.n	80072f0 <__libc_init_array+0xc>
 8007312:	f855 3b04 	ldr.w	r3, [r5], #4
 8007316:	4798      	blx	r3
 8007318:	3601      	adds	r6, #1
 800731a:	e7f2      	b.n	8007302 <__libc_init_array+0x1e>
 800731c:	08007454 	.word	0x08007454
 8007320:	08007454 	.word	0x08007454
 8007324:	08007454 	.word	0x08007454
 8007328:	08007458 	.word	0x08007458

0800732c <__retarget_lock_acquire_recursive>:
 800732c:	4770      	bx	lr

0800732e <__retarget_lock_release_recursive>:
 800732e:	4770      	bx	lr

08007330 <memcpy>:
 8007330:	440a      	add	r2, r1
 8007332:	4291      	cmp	r1, r2
 8007334:	f100 33ff 	add.w	r3, r0, #4294967295
 8007338:	d100      	bne.n	800733c <memcpy+0xc>
 800733a:	4770      	bx	lr
 800733c:	b510      	push	{r4, lr}
 800733e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007346:	4291      	cmp	r1, r2
 8007348:	d1f9      	bne.n	800733e <memcpy+0xe>
 800734a:	bd10      	pop	{r4, pc}

0800734c <_free_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4605      	mov	r5, r0
 8007350:	2900      	cmp	r1, #0
 8007352:	d041      	beq.n	80073d8 <_free_r+0x8c>
 8007354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007358:	1f0c      	subs	r4, r1, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	bfb8      	it	lt
 800735e:	18e4      	addlt	r4, r4, r3
 8007360:	f000 f83e 	bl	80073e0 <__malloc_lock>
 8007364:	4a1d      	ldr	r2, [pc, #116]	@ (80073dc <_free_r+0x90>)
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	b933      	cbnz	r3, 8007378 <_free_r+0x2c>
 800736a:	6063      	str	r3, [r4, #4]
 800736c:	6014      	str	r4, [r2, #0]
 800736e:	4628      	mov	r0, r5
 8007370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007374:	f000 b83a 	b.w	80073ec <__malloc_unlock>
 8007378:	42a3      	cmp	r3, r4
 800737a:	d908      	bls.n	800738e <_free_r+0x42>
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	1821      	adds	r1, r4, r0
 8007380:	428b      	cmp	r3, r1
 8007382:	bf01      	itttt	eq
 8007384:	6819      	ldreq	r1, [r3, #0]
 8007386:	685b      	ldreq	r3, [r3, #4]
 8007388:	1809      	addeq	r1, r1, r0
 800738a:	6021      	streq	r1, [r4, #0]
 800738c:	e7ed      	b.n	800736a <_free_r+0x1e>
 800738e:	461a      	mov	r2, r3
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	b10b      	cbz	r3, 8007398 <_free_r+0x4c>
 8007394:	42a3      	cmp	r3, r4
 8007396:	d9fa      	bls.n	800738e <_free_r+0x42>
 8007398:	6811      	ldr	r1, [r2, #0]
 800739a:	1850      	adds	r0, r2, r1
 800739c:	42a0      	cmp	r0, r4
 800739e:	d10b      	bne.n	80073b8 <_free_r+0x6c>
 80073a0:	6820      	ldr	r0, [r4, #0]
 80073a2:	4401      	add	r1, r0
 80073a4:	1850      	adds	r0, r2, r1
 80073a6:	4283      	cmp	r3, r0
 80073a8:	6011      	str	r1, [r2, #0]
 80073aa:	d1e0      	bne.n	800736e <_free_r+0x22>
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	6053      	str	r3, [r2, #4]
 80073b2:	4408      	add	r0, r1
 80073b4:	6010      	str	r0, [r2, #0]
 80073b6:	e7da      	b.n	800736e <_free_r+0x22>
 80073b8:	d902      	bls.n	80073c0 <_free_r+0x74>
 80073ba:	230c      	movs	r3, #12
 80073bc:	602b      	str	r3, [r5, #0]
 80073be:	e7d6      	b.n	800736e <_free_r+0x22>
 80073c0:	6820      	ldr	r0, [r4, #0]
 80073c2:	1821      	adds	r1, r4, r0
 80073c4:	428b      	cmp	r3, r1
 80073c6:	bf04      	itt	eq
 80073c8:	6819      	ldreq	r1, [r3, #0]
 80073ca:	685b      	ldreq	r3, [r3, #4]
 80073cc:	6063      	str	r3, [r4, #4]
 80073ce:	bf04      	itt	eq
 80073d0:	1809      	addeq	r1, r1, r0
 80073d2:	6021      	streq	r1, [r4, #0]
 80073d4:	6054      	str	r4, [r2, #4]
 80073d6:	e7ca      	b.n	800736e <_free_r+0x22>
 80073d8:	bd38      	pop	{r3, r4, r5, pc}
 80073da:	bf00      	nop
 80073dc:	20004e34 	.word	0x20004e34

080073e0 <__malloc_lock>:
 80073e0:	4801      	ldr	r0, [pc, #4]	@ (80073e8 <__malloc_lock+0x8>)
 80073e2:	f7ff bfa3 	b.w	800732c <__retarget_lock_acquire_recursive>
 80073e6:	bf00      	nop
 80073e8:	20004e30 	.word	0x20004e30

080073ec <__malloc_unlock>:
 80073ec:	4801      	ldr	r0, [pc, #4]	@ (80073f4 <__malloc_unlock+0x8>)
 80073ee:	f7ff bf9e 	b.w	800732e <__retarget_lock_release_recursive>
 80073f2:	bf00      	nop
 80073f4:	20004e30 	.word	0x20004e30

080073f8 <_init>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	bf00      	nop
 80073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fe:	bc08      	pop	{r3}
 8007400:	469e      	mov	lr, r3
 8007402:	4770      	bx	lr

08007404 <_fini>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	bf00      	nop
 8007408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740a:	bc08      	pop	{r3}
 800740c:	469e      	mov	lr, r3
 800740e:	4770      	bx	lr
